// Generated by typings
// Source: node_modules/primeng/components/dom/domhandler.d.ts
declare module '~primeng/components/dom/domhandler' {
export class DomHandler {
    static zindex: number;
    addClass(element: any, className: string): void;
    addMultipleClasses(element: any, className: string): void;
    removeClass(element: any, className: string): void;
    hasClass(element: any, className: string): boolean;
    siblings(element: any): any;
    find(element: any, selector: string): any[];
    findSingle(element: any, selector: string): any;
    index(element: any): number;
    relativePosition(element: any, target: any): void;
    absolutePosition(element: any, target: any): void;
    getHiddenElementOuterHeight(element: any): number;
    getHiddenElementOuterWidth(element: any): number;
    getHiddenElementDimensions(element: any): any;
    scrollInView(container: any, item: any): void;
    fadeIn(element: any, duration: number): void;
    fadeOut(element: any, ms: any): void;
    getWindowScrollTop(): number;
    getWindowScrollLeft(): number;
    matches(element: any, selector: string): boolean;
    getOuterWidth(el: any, margin?: any): any;
    getHorizontalPadding(el: any): number;
    getHorizontalMargin(el: any): number;
    innerWidth(el: any): any;
    width(el: any): any;
    getOuterHeight(el: any, margin?: any): any;
    getHeight(el: any): number;
    getWidth(el: any): number;
    getViewport(): any;
    getOffset(el: any): {
        left: any;
        top: any;
    };
    getUserAgent(): string;
    isIE(): boolean;
    appendChild(element: any, target: any): void;
    removeChild(element: any, target: any): void;
    isElement(obj: any): boolean;
    calculateScrollbarWidth(): number;
}
}
declare module 'primeng/components/dom/domhandler' {
export * from '~primeng/components/dom/domhandler';
}

// Generated by typings
// Source: node_modules/primeng/components/common/api.d.ts
declare module '~primeng/components/common/api' {
import { EventEmitter } from '@angular/core';
import { Observable } from 'rxjs/Observable';
export { DomHandler } from '~primeng/components/dom/domhandler';
export interface SortMeta {
    field: string;
    order: number;
}
export interface LazyLoadEvent {
    first?: number;
    rows?: number;
    sortField?: string;
    sortOrder?: number;
    multiSortMeta?: SortMeta[];
    filters?: {
        [s: string]: FilterMetadata;
    };
    globalFilter?: any;
}
export interface FilterMetadata {
    value?: any;
    matchMode?: string;
}
export interface MenuItem {
    label?: string;
    icon?: string;
    command?: (event?: any) => void;
    url?: string;
    routerLink?: any;
    eventEmitter?: EventEmitter<any>;
    items?: MenuItem[];
    expanded?: boolean;
    disabled?: boolean;
    visible?: boolean;
    target?: string;
}
export interface Message {
    severity?: string;
    summary?: string;
    detail?: string;
}
export interface SelectItem {
    label: string;
    value: any;
}
export interface TreeNode {
    label?: string;
    data?: any;
    icon?: any;
    expandedIcon?: any;
    collapsedIcon?: any;
    children?: TreeNode[];
    leaf?: boolean;
    expanded?: boolean;
    type?: string;
    parent?: TreeNode;
    partialSelected?: boolean;
    styleClass?: string;
}
export interface Confirmation {
    message: string;
    key?: string;
    icon?: string;
    header?: string;
    accept?: Function;
    reject?: Function;
    acceptVisible?: boolean;
    rejectVisible?: boolean;
    acceptEvent?: EventEmitter<any>;
    rejectEvent?: EventEmitter<any>;
}
export interface BlockableUI {
    getBlockableElement(): HTMLElement;
}
export class ConfirmationService {
    private requireConfirmationSource;
    private acceptConfirmationSource;
    requireConfirmation$: Observable<Confirmation>;
    accept: Observable<Confirmation>;
    confirm(confirmation: Confirmation): this;
    onAccept(): void;
}
}
declare module 'primeng/components/common/api' {
export * from '~primeng/components/common/api';
}

// Generated by typings
// Source: node_modules/primeng/components/common/shared.d.ts
declare module '~primeng/components/common/shared' {
import { EventEmitter, ViewContainerRef, TemplateRef, OnInit, OnDestroy, AfterContentInit, QueryList, EmbeddedViewRef } from '@angular/core';
export class Header {
}
export class Footer {
}
export class PrimeTemplate {
    template: TemplateRef<any>;
    type: string;
    name: string;
    constructor(template: TemplateRef<any>);
    getType(): string;
}
export class TemplateWrapper implements OnInit, OnDestroy {
    viewContainer: ViewContainerRef;
    item: any;
    index: number;
    templateRef: TemplateRef<any>;
    view: EmbeddedViewRef<any>;
    constructor(viewContainer: ViewContainerRef);
    ngOnInit(): void;
    ngOnDestroy(): void;
}
export class Column implements AfterContentInit {
    field: string;
    sortField: string;
    header: string;
    footer: string;
    sortable: any;
    editable: boolean;
    filter: boolean;
    filterMatchMode: string;
    rowspan: number;
    colspan: number;
    style: any;
    styleClass: string;
    hidden: boolean;
    expander: boolean;
    selectionMode: string;
    filterPlaceholder: string;
    frozen: boolean;
    sortFunction: EventEmitter<any>;
    templates: QueryList<any>;
    template: TemplateRef<any>;
    headerTemplate: TemplateRef<any>;
    bodyTemplate: TemplateRef<any>;
    footerTemplate: TemplateRef<any>;
    filterTemplate: TemplateRef<any>;
    editorTemplate: TemplateRef<any>;
    ngAfterContentInit(): void;
}
export class Row {
    columns: QueryList<Column>;
}
export class HeaderColumnGroup {
    rows: QueryList<any>;
}
export class FooterColumnGroup {
    rows: QueryList<any>;
}
export class ColumnBodyTemplateLoader implements OnInit, OnDestroy {
    viewContainer: ViewContainerRef;
    column: any;
    rowData: any;
    rowIndex: number;
    view: EmbeddedViewRef<any>;
    constructor(viewContainer: ViewContainerRef);
    ngOnInit(): void;
    ngOnDestroy(): void;
}
export class ColumnHeaderTemplateLoader implements OnInit, OnDestroy {
    viewContainer: ViewContainerRef;
    column: any;
    view: EmbeddedViewRef<any>;
    constructor(viewContainer: ViewContainerRef);
    ngOnInit(): void;
    ngOnDestroy(): void;
}
export class ColumnFooterTemplateLoader implements OnInit, OnDestroy {
    viewContainer: ViewContainerRef;
    column: any;
    view: EmbeddedViewRef<any>;
    constructor(viewContainer: ViewContainerRef);
    ngOnInit(): void;
    ngOnDestroy(): void;
}
export class ColumnFilterTemplateLoader implements OnInit, OnDestroy {
    viewContainer: ViewContainerRef;
    column: any;
    view: EmbeddedViewRef<any>;
    constructor(viewContainer: ViewContainerRef);
    ngOnInit(): void;
    ngOnDestroy(): void;
}
export class ColumnEditorTemplateLoader implements OnInit, OnDestroy {
    viewContainer: ViewContainerRef;
    column: any;
    rowData: any;
    view: EmbeddedViewRef<any>;
    constructor(viewContainer: ViewContainerRef);
    ngOnInit(): void;
    ngOnDestroy(): void;
}
export class TemplateLoader implements OnInit, OnDestroy {
    viewContainer: ViewContainerRef;
    template: TemplateRef<any>;
    data: any;
    view: EmbeddedViewRef<any>;
    constructor(viewContainer: ViewContainerRef);
    ngOnInit(): void;
    ngOnDestroy(): void;
}
export class SharedModule {
}
}
declare module 'primeng/components/common/shared' {
export * from '~primeng/components/common/shared';
}

// Generated by typings
// Source: node_modules/primeng/components/accordion/accordion.d.ts
declare module '~primeng/components/accordion/accordion' {
import { ElementRef, EventEmitter, QueryList } from '@angular/core';
import { BlockableUI } from '~primeng/components/common/api';
export class Accordion implements BlockableUI {
    el: ElementRef;
    multiple: boolean;
    onClose: EventEmitter<any>;
    onOpen: EventEmitter<any>;
    style: any;
    styleClass: string;
    lazy: boolean;
    tabs: AccordionTab[];
    constructor(el: ElementRef);
    addTab(tab: AccordionTab): void;
    getBlockableElement(): HTMLElement;
}
export class AccordionTab {
    accordion: Accordion;
    header: string;
    selected: boolean;
    disabled: boolean;
    selectedChange: EventEmitter<any>;
    headerFacet: QueryList<AccordionTab>;
    animating: boolean;
    constructor(accordion: Accordion);
    toggle(event: any): boolean;
    findTabIndex(): number;
    readonly lazy: boolean;
    readonly hasHeaderFacet: boolean;
}
export class AccordionModule {
}
}
declare module 'primeng/components/accordion/accordion' {
export * from '~primeng/components/accordion/accordion';
}

// Generated by typings
// Source: node_modules/primeng/components/utils/ObjectUtils.d.ts
declare module '~primeng/components/utils/ObjectUtils' {
export class ObjectUtils {
    equals(obj1: any, obj2: any): boolean;
    resolveFieldData(data: any, field: string): any;
}
}
declare module 'primeng/components/utils/ObjectUtils' {
export * from '~primeng/components/utils/ObjectUtils';
}

// Generated by typings
// Source: node_modules/primeng/components/autocomplete/autocomplete.d.ts
declare module '~primeng/components/autocomplete/autocomplete' {
import { ElementRef, AfterViewInit, AfterViewChecked, DoCheck, EventEmitter, QueryList, TemplateRef, IterableDiffers, Renderer } from '@angular/core';
import { DomHandler } from '~primeng/components/dom/domhandler';
import { ObjectUtils } from '~primeng/components/utils/ObjectUtils';
import { ControlValueAccessor } from '@angular/forms';
export const AUTOCOMPLETE_VALUE_ACCESSOR: any;
export class AutoComplete implements AfterViewInit, DoCheck, AfterViewChecked, ControlValueAccessor {
    el: ElementRef;
    domHandler: DomHandler;
    renderer: Renderer;
    objectUtils: ObjectUtils;
    minLength: number;
    delay: number;
    style: any;
    styleClass: string;
    inputStyle: any;
    inputStyleClass: string;
    placeholder: string;
    readonly: boolean;
    disabled: boolean;
    maxlength: number;
    size: number;
    suggestions: any[];
    appendTo: any;
    completeMethod: EventEmitter<any>;
    onSelect: EventEmitter<any>;
    onUnselect: EventEmitter<any>;
    onFocus: EventEmitter<any>;
    onDropdownClick: EventEmitter<any>;
    field: string;
    scrollHeight: string;
    dropdown: boolean;
    multiple: boolean;
    tabindex: number;
    templates: QueryList<any>;
    itemTemplate: TemplateRef<any>;
    selectedItemTemplate: TemplateRef<any>;
    value: any;
    onModelChange: Function;
    onModelTouched: Function;
    timeout: any;
    differ: any;
    panel: any;
    input: any;
    multipleContainer: any;
    panelVisible: boolean;
    documentClickListener: any;
    suggestionsUpdated: boolean;
    highlightOption: any;
    highlightOptionChanged: boolean;
    focus: boolean;
    dropdownFocus: boolean;
    filled: boolean;
    inputEL: ElementRef;
    constructor(el: ElementRef, domHandler: DomHandler, differs: IterableDiffers, renderer: Renderer, objectUtils: ObjectUtils);
    ngDoCheck(): void;
    ngAfterContentInit(): void;
    ngAfterViewInit(): void;
    ngAfterViewChecked(): void;
    writeValue(value: any): void;
    registerOnChange(fn: Function): void;
    registerOnTouched(fn: Function): void;
    setDisabledState(val: boolean): void;
    onInput(event: any): void;
    search(event: any, query: string): void;
    selectItem(option: any): void;
    show(): void;
    align(): void;
    hide(): void;
    handleDropdownClick(event: any): void;
    removeItem(item: any): void;
    onKeydown(event: any): void;
    onInputFocus(event: any): void;
    onBlur(): void;
    onDropdownFocus(): void;
    onDropdownBlur(): void;
    isSelected(val: any): boolean;
    findOptionIndex(option: any): number;
    updateFilledState(): void;
    ngOnDestroy(): void;
}
export class AutoCompleteModule {
}
}
declare module 'primeng/components/autocomplete/autocomplete' {
export * from '~primeng/components/autocomplete/autocomplete';
}

// Generated by typings
// Source: node_modules/primeng/components/blockui/blockui.d.ts
declare module '~primeng/components/blockui/blockui' {
import { AfterViewInit, OnDestroy, ElementRef } from '@angular/core';
import { DomHandler } from '~primeng/components/dom/domhandler';
export class BlockUI implements AfterViewInit, OnDestroy {
    el: ElementRef;
    domHandler: DomHandler;
    target: any;
    _blocked: boolean;
    _mask: HTMLDivElement;
    constructor(el: ElementRef, domHandler: DomHandler);
    blocked: boolean;
    ngAfterViewInit(): void;
    block(): void;
    unblock(): void;
    ngOnDestroy(): void;
}
export class BlockUIModule {
}
}
declare module 'primeng/components/blockui/blockui' {
export * from '~primeng/components/blockui/blockui';
}

// Generated by typings
// Source: node_modules/primeng/components/breadcrumb/breadcrumb.d.ts
declare module '~primeng/components/breadcrumb/breadcrumb' {
import { OnDestroy } from '@angular/core';
import { MenuItem } from '~primeng/components/common/api';
import { Router } from '@angular/router';
export class Breadcrumb implements OnDestroy {
    router: Router;
    model: MenuItem[];
    style: any;
    styleClass: string;
    home: MenuItem;
    constructor(router: Router);
    itemClick(event: any, item: MenuItem): void;
    onHomeClick(event: any): void;
    ngOnDestroy(): void;
}
export class BreadcrumbModule {
}
}
declare module 'primeng/components/breadcrumb/breadcrumb' {
export * from '~primeng/components/breadcrumb/breadcrumb';
}

// Generated by typings
// Source: node_modules/primeng/components/button/button.d.ts
declare module '~primeng/components/button/button' {
import { ElementRef, AfterViewInit, OnDestroy } from '@angular/core';
import { DomHandler } from '~primeng/components/dom/domhandler';
export class Button implements AfterViewInit, OnDestroy {
    el: ElementRef;
    domHandler: DomHandler;
    iconPos: string;
    cornerStyleClass: string;
    _label: string;
    _icon: string;
    initialized: boolean;
    constructor(el: ElementRef, domHandler: DomHandler);
    ngAfterViewInit(): void;
    getStyleClass(): string;
    label: string;
    icon: string;
    ngOnDestroy(): void;
}
export class ButtonModule {
}
}
declare module 'primeng/components/button/button' {
export * from '~primeng/components/button/button';
}

// Generated by typings
// Source: node_modules/primeng/components/captcha/captcha.d.ts
declare module '~primeng/components/captcha/captcha' {
import { AfterViewInit, EventEmitter, NgZone, ElementRef } from '@angular/core';
export class Captcha implements AfterViewInit {
    _zone: NgZone;
    siteKey: string;
    theme: string;
    type: string;
    size: string;
    tabindex: number;
    language: string;
    onResponse: EventEmitter<any>;
    onExpire: EventEmitter<any>;
    el: ElementRef;
    private _instance;
    constructor(_zone: NgZone);
    ngAfterViewInit(): void;
    init(): void;
    reset(): void;
    getResponse(): String;
    recaptchaCallback(response: string): void;
    recaptchaExpiredCallback(): void;
    ngOnDestroy(): void;
}
export class CaptchaModule {
}
}
declare module 'primeng/components/captcha/captcha' {
export * from '~primeng/components/captcha/captcha';
}

// Generated by typings
// Source: node_modules/primeng/components/calendar/calendar.d.ts
declare module '~primeng/components/calendar/calendar' {
import { ElementRef, AfterViewInit, OnDestroy, OnInit, EventEmitter, Renderer } from '@angular/core';
import { DomHandler } from '~primeng/components/dom/domhandler';
import { AbstractControl, ControlValueAccessor } from '@angular/forms';
export const CALENDAR_VALUE_ACCESSOR: any;
export const CALENDAR_VALIDATOR: any;
export interface LocaleSettings {
    firstDayOfWeek?: number;
    dayNames: string[];
    dayNamesShort: string[];
    dayNamesMin: string[];
    monthNames: string[];
    monthNamesShort: string[];
}
export class Calendar implements AfterViewInit, OnInit, OnDestroy, ControlValueAccessor {
    el: ElementRef;
    domHandler: DomHandler;
    renderer: Renderer;
    defaultDate: Date;
    style: string;
    styleClass: string;
    inputStyle: string;
    inputStyleClass: string;
    placeholder: string;
    disabled: any;
    dateFormat: string;
    inline: boolean;
    showOtherMonths: boolean;
    selectOtherMonths: boolean;
    showIcon: boolean;
    icon: string;
    appendTo: any;
    readonlyInput: boolean;
    shortYearCutoff: any;
    monthNavigator: boolean;
    yearNavigator: boolean;
    yearRange: string;
    showTime: boolean;
    hourFormat: string;
    timeOnly: boolean;
    stepHour: number;
    stepMinute: number;
    stepSecond: number;
    showSeconds: boolean;
    required: boolean;
    showOnFocus: boolean;
    dataType: string;
    onFocus: EventEmitter<any>;
    onBlur: EventEmitter<any>;
    onSelect: EventEmitter<any>;
    locale: LocaleSettings;
    tabindex: number;
    overlayViewChild: ElementRef;
    value: Date;
    dates: any[];
    weekDays: string[];
    currentMonthText: string;
    currentMonth: number;
    currentYear: number;
    currentHour: number;
    currentMinute: number;
    currentSecond: number;
    pm: boolean;
    overlay: HTMLDivElement;
    overlayVisible: boolean;
    closeOverlay: boolean;
    dateClick: boolean;
    onModelChange: Function;
    onModelTouched: Function;
    calendarElement: any;
    documentClickListener: any;
    ticksTo1970: number;
    yearOptions: number[];
    focus: boolean;
    filled: boolean;
    inputFieldValue: string;
    _minDate: Date;
    _maxDate: Date;
    _isValid: boolean;
    minDate: Date;
    maxDate: Date;
    constructor(el: ElementRef, domHandler: DomHandler, renderer: Renderer);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    createMonth(month: number, year: number): void;
    prevMonth(event: any): void;
    nextMonth(event: any): void;
    onDateSelect(event: any, dateMeta: any): void;
    updateInputfield(): void;
    selectDate(dateMeta: any): void;
    updateModel(): void;
    getFirstDayOfMonthIndex(month: number, year: number): number;
    getDaysCountInMonth(month: number, year: number): number;
    getDaysCountInPrevMonth(month: number, year: number): number;
    getPreviousMonthAndYear(month: number, year: number): {
        'month': any;
        'year': any;
    };
    getNextMonthAndYear(month: number, year: number): {
        'month': any;
        'year': any;
    };
    getSundayIndex(): number;
    isSelected(dateMeta: any): boolean;
    isToday(today: any, day: any, month: any, year: any): boolean;
    isSelectable(day: any, month: any, year: any): boolean;
    onInputFocus(inputfield: any, event: any): void;
    onInputBlur(event: any): void;
    onButtonClick(event: any, inputfield: any): void;
    onInputKeydown(event: any): void;
    onMonthDropdownChange(m: string): void;
    onYearDropdownChange(y: string): void;
    incrementHour(event: any): void;
    decrementHour(event: any): void;
    incrementMinute(event: any): void;
    decrementMinute(event: any): void;
    incrementSecond(event: any): void;
    decrementSecond(event: any): void;
    updateTime(): void;
    toggleAMPM(event: any): void;
    onInput(event: any): void;
    parseValueFromString(text: string): Date;
    populateTime(value: any, timeString: any, ampm: any): void;
    updateUI(): void;
    onDatePickerClick(event: any): void;
    showOverlay(inputfield: any): void;
    writeValue(value: any): void;
    registerOnChange(fn: Function): void;
    registerOnTouched(fn: Function): void;
    setDisabledState(val: boolean): void;
    formatDate(date: any, format: any): string;
    formatTime(date: any): string;
    parseTime(value: any): {
        hour: number;
        minute: number;
        second: number;
    };
    parseDate(value: any, format: any): any;
    daylightSavingAdjust(date: any): any;
    updateFilledState(): void;
    bindDocumentClickListener(): void;
    unbindDocumentClickListener(): void;
    ngOnDestroy(): void;
    validate(c: AbstractControl): {
        invalidDate: boolean;
    };
}
export class CalendarModule {
}
}
declare module 'primeng/components/calendar/calendar' {
export * from '~primeng/components/calendar/calendar';
}

// Generated by typings
// Source: node_modules/primeng/components/carousel/carousel.d.ts
declare module '~primeng/components/carousel/carousel' {
import { ElementRef, OnInit, AfterViewInit, AfterViewChecked, EventEmitter, DoCheck, OnDestroy, IterableDiffers, TemplateRef, QueryList, Renderer } from '@angular/core';
import { DomHandler } from '~primeng/components/dom/domhandler';
export class Carousel implements OnInit, AfterViewChecked, AfterViewInit, DoCheck, OnDestroy {
    el: ElementRef;
    domHandler: DomHandler;
    renderer: Renderer;
    value: any[];
    numVisible: number;
    firstVisible: number;
    headerText: string;
    circular: boolean;
    breakpoint: number;
    responsive: boolean;
    autoplayInterval: number;
    effectDuration: any;
    easing: string;
    pageLinks: number;
    style: any;
    styleClass: string;
    onPage: EventEmitter<any>;
    templates: QueryList<any>;
    itemTemplate: TemplateRef<any>;
    container: any;
    left: any;
    viewport: any;
    itemsContainer: any;
    items: any;
    columns: any;
    page: number;
    valuesChanged: any;
    interval: any;
    anchorPageLinks: any[];
    mobileDropdownOptions: any[];
    selectDropdownOptions: any[];
    shrinked: boolean;
    documentResponsiveListener: any;
    differ: any;
    constructor(el: ElementRef, domHandler: DomHandler, differs: IterableDiffers, renderer: Renderer);
    ngAfterContentInit(): void;
    ngDoCheck(): void;
    ngAfterViewChecked(): void;
    ngOnInit(): void;
    ngAfterViewInit(): void;
    updateLinks(): void;
    updateDropdown(): void;
    updateMobileDropdown(): void;
    render(): void;
    calculateItemWidths(): void;
    onNextNav(): void;
    onPrevNav(): void;
    setPageWithLink(event: any, p: number): void;
    setPage(p: any, enforce?: boolean): void;
    onDropdownChange(val: string): void;
    readonly displayPageLinks: boolean;
    readonly displayPageDropdown: boolean;
    readonly totalPages: number;
    routerDisplay(): boolean;
    updateState(): void;
    startAutoplay(): void;
    stopAutoplay(): void;
    ngOnDestroy(): void;
}
export class CarouselModule {
}
}
declare module 'primeng/components/carousel/carousel' {
export * from '~primeng/components/carousel/carousel';
}

// Generated by typings
// Source: node_modules/primeng/components/chart/chart.d.ts
declare module '~primeng/components/chart/chart' {
import { ElementRef, AfterViewInit, OnDestroy, EventEmitter, IterableDiffers } from '@angular/core';
export class UIChart implements AfterViewInit, OnDestroy {
    el: ElementRef;
    type: string;
    data: any;
    options: any;
    width: string;
    height: string;
    onDataSelect: EventEmitter<any>;
    initialized: boolean;
    chart: any;
    differ: any;
    constructor(el: ElementRef, differs: IterableDiffers);
    ngAfterViewInit(): void;
    onCanvasClick(event: any): void;
    initChart(): void;
    getCanvas(): any;
    getBase64Image(): any;
    refresh(): void;
    reinit(): void;
    ngOnDestroy(): void;
}
export class ChartModule {
}
}
declare module 'primeng/components/chart/chart' {
export * from '~primeng/components/chart/chart';
}

// Generated by typings
// Source: node_modules/primeng/components/checkbox/checkbox.d.ts
declare module '~primeng/components/checkbox/checkbox' {
import { EventEmitter, ChangeDetectorRef } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
export const CHECKBOX_VALUE_ACCESSOR: any;
export class Checkbox implements ControlValueAccessor {
    private cd;
    value: any;
    name: string;
    disabled: boolean;
    binary: string;
    label: string;
    tabindex: number;
    onChange: EventEmitter<any>;
    model: any;
    onModelChange: Function;
    onModelTouched: Function;
    focused: boolean;
    checked: boolean;
    constructor(cd: ChangeDetectorRef);
    onClick(event: any, checkbox: any, focus: boolean): void;
    updateModel(): void;
    handleChange(event: any): void;
    isChecked(): boolean;
    removeValue(value: any): void;
    addValue(value: any): void;
    onFocus(event: any): void;
    onBlur(event: any): void;
    findValueIndex(value: any): number;
    writeValue(model: any): void;
    registerOnChange(fn: Function): void;
    registerOnTouched(fn: Function): void;
    setDisabledState(val: boolean): void;
}
export class CheckboxModule {
}
}
declare module 'primeng/components/checkbox/checkbox' {
export * from '~primeng/components/checkbox/checkbox';
}

// Generated by typings
// Source: node_modules/primeng/components/chips/chips.d.ts
declare module '~primeng/components/chips/chips' {
import { ElementRef, EventEmitter, AfterContentInit, QueryList, TemplateRef } from '@angular/core';
import { DomHandler } from '~primeng/components/dom/domhandler';
import { ControlValueAccessor } from '@angular/forms';
export const CHIPS_VALUE_ACCESSOR: any;
export class Chips implements AfterContentInit, ControlValueAccessor {
    el: ElementRef;
    domHandler: DomHandler;
    style: any;
    styleClass: string;
    disabled: boolean;
    onAdd: EventEmitter<any>;
    onRemove: EventEmitter<any>;
    field: string;
    placeholder: string;
    max: number;
    tabindex: number;
    templates: QueryList<any>;
    itemTemplate: TemplateRef<any>;
    value: any;
    onModelChange: Function;
    onModelTouched: Function;
    valueChanged: boolean;
    focus: boolean;
    constructor(el: ElementRef, domHandler: DomHandler);
    ngAfterContentInit(): void;
    writeValue(value: any): void;
    registerOnChange(fn: Function): void;
    registerOnTouched(fn: Function): void;
    setDisabledState(val: boolean): void;
    resolveFieldData(data: any, field: string): any;
    onFocus(): void;
    onBlur(): void;
    removeItem(event: Event, index: number): void;
    onKeydown(event: KeyboardEvent, inputEL: HTMLInputElement): void;
    readonly maxedOut: boolean;
}
export class ChipsModule {
}
}
declare module 'primeng/components/chips/chips' {
export * from '~primeng/components/chips/chips';
}

// Generated by typings
// Source: node_modules/primeng/components/codehighlighter/codehighlighter.d.ts
declare module '~primeng/components/codehighlighter/codehighlighter' {
import { ElementRef, OnInit } from '@angular/core';
export class CodeHighlighter implements OnInit {
    el: ElementRef;
    constructor(el: ElementRef);
    ngOnInit(): void;
}
export class CodeHighlighterModule {
}
}
declare module 'primeng/components/codehighlighter/codehighlighter' {
export * from '~primeng/components/codehighlighter/codehighlighter';
}

// Generated by typings
// Source: node_modules/primeng/components/contextmenu/contextmenu.d.ts
declare module '~primeng/components/contextmenu/contextmenu' {
import { ElementRef, AfterViewInit, OnDestroy, Renderer } from '@angular/core';
import { DomHandler } from '~primeng/components/dom/domhandler';
import { MenuItem } from '~primeng/components/common/api';
import { Router } from '@angular/router';
export class ContextMenuSub {
    domHandler: DomHandler;
    router: Router;
    contextMenu: ContextMenu;
    item: MenuItem;
    root: boolean;
    constructor(domHandler: DomHandler, router: Router, contextMenu: ContextMenu);
    activeItem: any;
    containerLeft: any;
    onItemMouseEnter(event: any, item: any, menuitem: any): void;
    onItemMouseLeave(event: any, link: any): void;
    itemClick(event: any, item: MenuItem): void;
    listClick(event: any): void;
    position(sublist: any, item: any): void;
    calculateScrollbarWidth(): number;
}
export class ContextMenu implements AfterViewInit, OnDestroy {
    el: ElementRef;
    domHandler: DomHandler;
    renderer: Renderer;
    model: MenuItem[];
    global: boolean;
    style: any;
    styleClass: string;
    appendTo: any;
    containerViewChild: ElementRef;
    container: HTMLDivElement;
    visible: boolean;
    documentClickListener: any;
    documentRightClickListener: any;
    constructor(el: ElementRef, domHandler: DomHandler, renderer: Renderer);
    ngAfterViewInit(): void;
    show(event?: MouseEvent): void;
    hide(): void;
    toggle(event?: MouseEvent): void;
    position(event?: MouseEvent): void;
    unsubscribe(item: any): void;
    ngOnDestroy(): void;
}
export class ContextMenuModule {
}
}
declare module 'primeng/components/contextmenu/contextmenu' {
export * from '~primeng/components/contextmenu/contextmenu';
}

// Generated by typings
// Source: node_modules/primeng/components/datagrid/datagrid.d.ts
declare module '~primeng/components/datagrid/datagrid' {
import { ElementRef, AfterViewInit, AfterContentInit, DoCheck, EventEmitter, QueryList, IterableDiffers, TemplateRef } from '@angular/core';
import { BlockableUI } from '~primeng/components/common/api';
export class DataGrid implements AfterViewInit, AfterContentInit, DoCheck, BlockableUI {
    el: ElementRef;
    value: any[];
    paginator: boolean;
    rows: number;
    totalRecords: number;
    pageLinks: number;
    rowsPerPageOptions: number[];
    lazy: boolean;
    onLazyLoad: EventEmitter<any>;
    style: any;
    styleClass: string;
    paginatorPosition: string;
    onPage: EventEmitter<any>;
    header: any;
    footer: any;
    templates: QueryList<any>;
    itemTemplate: TemplateRef<any>;
    dataToRender: any[];
    first: number;
    page: number;
    differ: any;
    constructor(el: ElementRef, differs: IterableDiffers);
    ngAfterViewInit(): void;
    ngAfterContentInit(): void;
    ngDoCheck(): void;
    updatePaginator(): void;
    paginate(event: any): void;
    updateDataToRender(datasource: any): void;
    isEmpty(): boolean;
    createLazyLoadMetadata(): any;
    getBlockableElement(): HTMLElement;
}
export class DataGridModule {
}
}
declare module 'primeng/components/datagrid/datagrid' {
export * from '~primeng/components/datagrid/datagrid';
}

// Generated by typings
// Source: node_modules/primeng/components/datalist/datalist.d.ts
declare module '~primeng/components/datalist/datalist' {
import { ElementRef, AfterViewInit, AfterContentInit, DoCheck, EventEmitter, IterableDiffers, TemplateRef, QueryList } from '@angular/core';
import { BlockableUI } from '~primeng/components/common/api';
export class DataList implements AfterViewInit, AfterContentInit, DoCheck, BlockableUI {
    el: ElementRef;
    value: any[];
    paginator: boolean;
    rows: number;
    totalRecords: number;
    pageLinks: number;
    rowsPerPageOptions: number[];
    lazy: boolean;
    onLazyLoad: EventEmitter<any>;
    style: any;
    styleClass: string;
    paginatorPosition: string;
    emptyMessage: string;
    onPage: EventEmitter<any>;
    header: any;
    footer: any;
    templates: QueryList<any>;
    itemTemplate: TemplateRef<any>;
    dataToRender: any[];
    first: number;
    page: number;
    differ: any;
    constructor(el: ElementRef, differs: IterableDiffers);
    ngAfterContentInit(): void;
    ngAfterViewInit(): void;
    ngDoCheck(): void;
    updatePaginator(): void;
    paginate(event: any): void;
    updateDataToRender(datasource: any): void;
    isEmpty(): boolean;
    createLazyLoadMetadata(): any;
    getBlockableElement(): HTMLElement;
}
export class DataListModule {
}
}
declare module 'primeng/components/datalist/datalist' {
export * from '~primeng/components/datalist/datalist';
}

// Generated by typings
// Source: node_modules/primeng/components/datascroller/datascroller.d.ts
declare module '~primeng/components/datascroller/datascroller' {
import { ElementRef, AfterViewInit, OnDestroy, DoCheck, Renderer, EventEmitter, QueryList, IterableDiffers, TemplateRef } from '@angular/core';
import { DomHandler } from '~primeng/components/dom/domhandler';
export class DataScroller implements AfterViewInit, DoCheck, OnDestroy {
    el: ElementRef;
    renderer: Renderer;
    domHandler: DomHandler;
    value: any[];
    rows: number;
    lazy: boolean;
    onLazyLoad: EventEmitter<any>;
    style: any;
    styleClass: string;
    buffer: number;
    inline: boolean;
    scrollHeight: any;
    loader: any;
    contentViewChild: ElementRef;
    header: any;
    footer: any;
    templates: QueryList<any>;
    itemTemplate: TemplateRef<any>;
    dataToRender: any[];
    first: number;
    differ: any;
    scrollFunction: any;
    contentElement: HTMLDivElement;
    constructor(el: ElementRef, differs: IterableDiffers, renderer: Renderer, domHandler: DomHandler);
    ngAfterViewInit(): void;
    ngAfterContentInit(): void;
    ngDoCheck(): void;
    load(): void;
    reset(): void;
    isEmpty(): boolean;
    createLazyLoadMetadata(): any;
    bindScrollListener(): void;
    ngOnDestroy(): void;
}
export class DataScrollerModule {
}
}
declare module 'primeng/components/datascroller/datascroller' {
export * from '~primeng/components/datascroller/datascroller';
}

// Generated by typings
// Source: node_modules/primeng/components/datatable/datatable.d.ts
declare module '~primeng/components/datatable/datatable' {
import { ElementRef, AfterContentInit, AfterViewInit, AfterViewChecked, OnInit, OnDestroy, DoCheck, ViewContainerRef, EventEmitter, Renderer, IterableDiffers, QueryList, TemplateRef, ChangeDetectorRef } from '@angular/core';
import { Column, HeaderColumnGroup, FooterColumnGroup, PrimeTemplate } from '~primeng/components/common/shared';
import { LazyLoadEvent, FilterMetadata, SortMeta } from '~primeng/components/common/api';
import { DomHandler } from '~primeng/components/dom/domhandler';
import { ObjectUtils } from '~primeng/components/utils/ObjectUtils';
import { Subscription } from 'rxjs/Subscription';
import { BlockableUI } from '~primeng/components/common/api';
export class DTRadioButton {
    checked: boolean;
    onClick: EventEmitter<any>;
    hover: boolean;
    handleClick(event: any): void;
}
export class DTCheckbox {
    checked: boolean;
    disabled: boolean;
    onChange: EventEmitter<any>;
    hover: boolean;
    handleClick(event: any): void;
}
export class RowExpansionLoader {
    viewContainer: ViewContainerRef;
    template: TemplateRef<any>;
    rowData: any;
    constructor(viewContainer: ViewContainerRef);
    ngOnInit(): void;
}
export class ColumnHeaders {
    dt: DataTable;
    constructor(dt: DataTable);
    columns: Column[];
}
export class ColumnFooters {
    dt: DataTable;
    constructor(dt: DataTable);
    columns: Column[];
}
export class TableBody {
    dt: DataTable;
    constructor(dt: DataTable);
    columns: Column[];
    visibleColumns(): Column[];
}
export class ScrollableView implements AfterViewInit, AfterViewChecked, OnDestroy {
    dt: DataTable;
    domHandler: DomHandler;
    el: ElementRef;
    renderer: Renderer;
    constructor(dt: DataTable, domHandler: DomHandler, el: ElementRef, renderer: Renderer);
    columns: Column[];
    scrollHeaderViewChild: ElementRef;
    scrollHeaderBoxViewChild: ElementRef;
    scrollBodyViewChild: ElementRef;
    scrollTableViewChild: ElementRef;
    scrollTableWrapperViewChild: ElementRef;
    frozen: boolean;
    width: string;
    virtualScroll: boolean;
    onVirtualScroll: EventEmitter<any>;
    loading: boolean;
    scrollBody: HTMLDivElement;
    scrollHeader: HTMLDivElement;
    scrollHeaderBox: HTMLDivElement;
    scrollTable: HTMLDivElement;
    scrollTableWrapper: HTMLDivElement;
    bodyScrollListener: Function;
    headerScrollListener: Function;
    scrollBodyMouseWheelListener: Function;
    scrollFunction: Function;
    rowHeight: number;
    scrollTimeout: any;
    ngAfterViewInit(): void;
    ngAfterViewChecked(): void;
    initScrolling(): void;
    readonly virtualTableHeight: string;
    ngOnDestroy(): void;
}
export class DataTable implements AfterViewChecked, AfterViewInit, AfterContentInit, OnInit, DoCheck, OnDestroy, BlockableUI {
    el: ElementRef;
    domHandler: DomHandler;
    renderer: Renderer;
    changeDetector: ChangeDetectorRef;
    objectUtils: ObjectUtils;
    value: any[];
    paginator: boolean;
    rows: number;
    totalRecords: number;
    pageLinks: number;
    rowsPerPageOptions: number[];
    responsive: boolean;
    stacked: boolean;
    selectionMode: string;
    selection: any;
    selectionChange: EventEmitter<any>;
    editable: boolean;
    onRowClick: EventEmitter<any>;
    onRowSelect: EventEmitter<any>;
    onRowUnselect: EventEmitter<any>;
    onRowDblclick: EventEmitter<any>;
    onHeaderCheckboxToggle: EventEmitter<any>;
    onContextMenuSelect: EventEmitter<any>;
    filterDelay: number;
    lazy: boolean;
    onLazyLoad: EventEmitter<any>;
    resizableColumns: boolean;
    columnResizeMode: string;
    onColResize: EventEmitter<any>;
    reorderableColumns: boolean;
    onColReorder: EventEmitter<any>;
    scrollable: boolean;
    virtualScroll: boolean;
    scrollHeight: any;
    scrollWidth: any;
    frozenWidth: any;
    unfrozenWidth: any;
    style: any;
    styleClass: string;
    tableStyle: any;
    tableStyleClass: string;
    globalFilter: any;
    sortMode: string;
    sortField: string;
    sortOrder: number;
    groupField: string;
    multiSortMeta: SortMeta[];
    contextMenu: any;
    csvSeparator: string;
    exportFilename: string;
    emptyMessage: string;
    paginatorPosition: string;
    metaKeySelection: boolean;
    onEditInit: EventEmitter<any>;
    onEditComplete: EventEmitter<any>;
    onEdit: EventEmitter<any>;
    onEditCancel: EventEmitter<any>;
    onPage: EventEmitter<any>;
    onSort: EventEmitter<any>;
    onFilter: EventEmitter<any>;
    header: any;
    footer: any;
    expandableRows: boolean;
    expandedRows: any[];
    expandableRowGroups: boolean;
    rowExpandMode: string;
    expandedRowsGroups: any[];
    tabindex: number;
    rowStyleClass: Function;
    rowGroupMode: string;
    sortableRowGroup: boolean;
    sortFile: string;
    rowHover: boolean;
    first: number;
    filters: {
        [s: string]: FilterMetadata;
    };
    onRowExpand: EventEmitter<any>;
    onRowCollapse: EventEmitter<any>;
    onRowGroupExpand: EventEmitter<any>;
    onRowGroupCollapse: EventEmitter<any>;
    templates: QueryList<PrimeTemplate>;
    cols: QueryList<Column>;
    headerColumnGroup: HeaderColumnGroup;
    footerColumnGroup: FooterColumnGroup;
    dataToRender: any[];
    page: number;
    filterTimeout: any;
    filteredValue: any[];
    columns: Column[];
    frozenColumns: Column[];
    scrollableColumns: Column[];
    columnsChanged: boolean;
    dataChanged: boolean;
    stopSortPropagation: boolean;
    sortColumn: Column;
    columnResizing: boolean;
    lastResizerHelperX: number;
    documentColumnResizeListener: Function;
    documentColumnResizeEndListener: Function;
    resizerHelper: any;
    resizeColumn: any;
    reorderIndicatorUp: any;
    reorderIndicatorDown: any;
    draggedColumn: any;
    dropPosition: number;
    tbody: any;
    rowTouched: boolean;
    rowGroupToggleClick: boolean;
    editingCell: any;
    stopFilterPropagation: boolean;
    rowGroupMetadata: any;
    rowGroupHeaderTemplate: TemplateRef<any>;
    rowGroupFooterTemplate: TemplateRef<any>;
    rowExpansionTemplate: TemplateRef<any>;
    scrollBarWidth: number;
    loading: boolean;
    differ: any;
    globalFilterFunction: any;
    columnsSubscription: Subscription;
    constructor(el: ElementRef, domHandler: DomHandler, differs: IterableDiffers, renderer: Renderer, changeDetector: ChangeDetectorRef, objectUtils: ObjectUtils);
    ngOnInit(): void;
    ngAfterContentInit(): void;
    ngAfterViewChecked(): void;
    ngAfterViewInit(): void;
    ngDoCheck(): void;
    initColumns(): void;
    resolveFieldData(data: any, field: string): any;
    updateRowGroupMetadata(): void;
    updatePaginator(): void;
    paginate(event: any): void;
    updateDataToRender(datasource: any): void;
    onVirtualScroll(event: any): void;
    onHeaderKeydown(event: any, column: Column): void;
    onHeaderMousedown(event: any, header: any): void;
    sort(event: any, column: Column): void;
    sortSingle(): void;
    sortMultiple(): void;
    multisortField(data1: any, data2: any, multiSortMeta: any, index: any): any;
    addSortMeta(meta: any): void;
    isSorted(column: Column): boolean;
    getSortOrder(column: Column): number;
    onRowGroupClick(event: any): void;
    handleRowClick(event: any, rowData: any): void;
    handleRowTouchEnd(event: any): void;
    selectRowWithRadio(event: any, rowData: any): void;
    toggleRowWithCheckbox(event: any, rowData: any): void;
    toggleRowsWithCheckbox(event: any): void;
    onRowRightClick(event: any, rowData: any): void;
    rowDblclick(event: any, rowData: any): void;
    isSingleSelectionMode(): boolean;
    isMultipleSelectionMode(): boolean;
    findIndexInSelection(rowData: any): number;
    isSelected(rowData: any): boolean;
    readonly allSelected: boolean;
    onFilterKeyup(value: any, field: any, matchMode: any): void;
    filter(value: any, field: any, matchMode: any): void;
    isFilterBlank(filter: any): boolean;
    _filter(): void;
    hasFilter(): any;
    onFilterInputClick(event: any): void;
    filterConstraints: {
        startsWith(value: any, filter: any): boolean;
        contains(value: any, filter: any): boolean;
        endsWith(value: any, filter: any): boolean;
        equals(value: any, filter: any): boolean;
        in(value: any, filter: any[]): boolean;
    };
    switchCellToEditMode(cell: any, column: Column, rowData: any): void;
    switchCellToViewMode(element: any): void;
    onCellEditorKeydown(event: any, column: Column, rowData: any, colIndex: number): void;
    findCell(element: any): any;
    initResizableColumns(): void;
    initColumnResize(event: any): void;
    onColumnResize(event: any): void;
    onColumnResizeEnd(event: any): void;
    fixColumnWidths(): void;
    onColumnDragStart(event: any): void;
    onColumnDragover(event: any): void;
    onColumnDragleave(event: any): void;
    onColumnDrop(event: any): void;
    initColumnReordering(): void;
    findParentHeader(element: any): any;
    hasFooter(): boolean;
    isEmpty(): boolean;
    createLazyLoadMetadata(): LazyLoadEvent;
    toggleRow(row: any, event?: Event): void;
    findExpandedRowIndex(row: any): number;
    isRowExpanded(row: any): boolean;
    findExpandedRowGroupIndex(row: any): number;
    isRowGroupExpanded(row: any): boolean;
    toggleRowGroup(event: Event, row: any): void;
    reset(): void;
    exportCSV(): void;
    getBlockableElement(): HTMLElement;
    getRowStyleClass(rowData: any, rowIndex: number): string;
    visibleColumns(): Column[];
    readonly containerWidth: any;
    ngOnDestroy(): void;
}
export class DataTableModule {
}
}
declare module 'primeng/components/datatable/datatable' {
export * from '~primeng/components/datatable/datatable';
}

// Generated by typings
// Source: node_modules/primeng/components/confirmdialog/confirmdialog.d.ts
declare module '~primeng/components/confirmdialog/confirmdialog' {
import { ElementRef, AfterViewInit, OnDestroy, Renderer } from '@angular/core';
import { DomHandler } from '~primeng/components/dom/domhandler';
import { ConfirmationService, Confirmation } from '~primeng/components/common/api';
import { Subscription } from 'rxjs/Subscription';
export class ConfirmDialog implements AfterViewInit, OnDestroy {
    el: ElementRef;
    domHandler: DomHandler;
    renderer: Renderer;
    private confirmationService;
    header: string;
    icon: string;
    message: string;
    acceptIcon: string;
    acceptLabel: string;
    acceptVisible: boolean;
    rejectIcon: string;
    rejectLabel: string;
    rejectVisible: boolean;
    width: any;
    height: any;
    closeOnEscape: boolean;
    rtl: boolean;
    closable: boolean;
    responsive: boolean;
    appendTo: any;
    key: string;
    footer: any;
    confirmation: Confirmation;
    _visible: boolean;
    documentEscapeListener: any;
    documentResponsiveListener: any;
    mask: any;
    contentContainer: any;
    positionInitialized: boolean;
    subscription: Subscription;
    constructor(el: ElementRef, domHandler: DomHandler, renderer: Renderer, confirmationService: ConfirmationService);
    visible: boolean;
    ngAfterViewInit(): void;
    center(): void;
    enableModality(): void;
    disableModality(): void;
    hide(event?: Event): void;
    moveOnTop(): void;
    ngOnDestroy(): void;
    accept(): void;
    reject(): void;
}
export class ConfirmDialogModule {
}
}
declare module 'primeng/components/confirmdialog/confirmdialog' {
export * from '~primeng/components/confirmdialog/confirmdialog';
}

// Generated by typings
// Source: node_modules/primeng/components/dialog/dialog.d.ts
declare module '~primeng/components/dialog/dialog' {
import { ElementRef, AfterViewInit, AfterViewChecked, OnDestroy, EventEmitter, Renderer } from '@angular/core';
import { DomHandler } from '~primeng/components/dom/domhandler';
export class Dialog implements AfterViewInit, AfterViewChecked, OnDestroy {
    el: ElementRef;
    domHandler: DomHandler;
    renderer: Renderer;
    header: string;
    draggable: boolean;
    resizable: boolean;
    minWidth: number;
    minHeight: number;
    width: any;
    height: any;
    contentStyle: any;
    modal: boolean;
    closeOnEscape: boolean;
    dismissableMask: boolean;
    rtl: boolean;
    closable: boolean;
    responsive: boolean;
    appendTo: any;
    style: any;
    styleClass: string;
    showHeader: boolean;
    headerFacet: any;
    containerViewChild: ElementRef;
    contentViewChild: ElementRef;
    onBeforeShow: EventEmitter<any>;
    onAfterShow: EventEmitter<any>;
    onBeforeHide: EventEmitter<any>;
    onAfterHide: EventEmitter<any>;
    visibleChange: EventEmitter<any>;
    _visible: boolean;
    dragging: boolean;
    documentDragListener: Function;
    resizing: boolean;
    documentResizeListener: Function;
    documentResizeEndListener: Function;
    documentResponsiveListener: Function;
    documentEscapeListener: Function;
    maskClickListener: Function;
    lastPageX: number;
    lastPageY: number;
    mask: HTMLDivElement;
    shown: boolean;
    container: HTMLDivElement;
    contentContainer: HTMLDivElement;
    positionInitialized: boolean;
    constructor(el: ElementRef, domHandler: DomHandler, renderer: Renderer);
    visible: boolean;
    show(): void;
    ngAfterViewInit(): void;
    ngAfterViewChecked(): void;
    center(): void;
    enableModality(): void;
    disableModality(): void;
    hide(event: any): void;
    unbindMaskClickListener(): void;
    moveOnTop(): void;
    initDrag(event: any): void;
    onDrag(event: any): void;
    endDrag(event: any): void;
    initResize(event: any): void;
    onResize(event: any): void;
    ngOnDestroy(): void;
}
export class DialogModule {
}
}
declare module 'primeng/components/dialog/dialog' {
export * from '~primeng/components/dialog/dialog';
}

// Generated by typings
// Source: node_modules/primeng/components/dragdrop/dragdrop.d.ts
declare module '~primeng/components/dragdrop/dragdrop' {
import { ElementRef, EventEmitter } from '@angular/core';
import { DomHandler } from '~primeng/components/dom/domhandler';
export class Draggable {
    el: ElementRef;
    domHandler: DomHandler;
    scope: string;
    dragEffect: string;
    dragHandle: string;
    onDragStart: EventEmitter<any>;
    onDragEnd: EventEmitter<any>;
    onDrag: EventEmitter<any>;
    handle: any;
    constructor(el: ElementRef, domHandler: DomHandler);
    dragStart(event: any): void;
    drag(event: any): void;
    dragEnd(event: any): void;
    mouseover(event: any): void;
    mouseleave(event: any): void;
    allowDrag(): boolean;
}
export class Droppable {
    el: ElementRef;
    domHandler: DomHandler;
    scope: string | string[];
    dropEffect: string;
    onDragEnter: EventEmitter<any>;
    onDragLeave: EventEmitter<any>;
    onDrop: EventEmitter<any>;
    onDragOver: EventEmitter<any>;
    constructor(el: ElementRef, domHandler: DomHandler);
    drop(event: any): void;
    dragEnter(event: any): void;
    dragLeave(event: any): void;
    dragOver(event: any): void;
    allowDrop(event: any): boolean;
}
export class DragDropModule {
}
}
declare module 'primeng/components/dragdrop/dragdrop' {
export * from '~primeng/components/dragdrop/dragdrop';
}

// Generated by typings
// Source: node_modules/primeng/components/dropdown/dropdown.d.ts
declare module '~primeng/components/dropdown/dropdown' {
import { ElementRef, OnInit, AfterViewInit, AfterContentInit, AfterViewChecked, DoCheck, OnDestroy, Renderer, EventEmitter, QueryList, TemplateRef, IterableDiffers, ChangeDetectorRef } from '@angular/core';
import { SelectItem } from '~primeng/components/common/api';
import { DomHandler } from '~primeng/components/dom/domhandler';
import { ObjectUtils } from '~primeng/components/utils/ObjectUtils';
import { ControlValueAccessor } from '@angular/forms';
export const DROPDOWN_VALUE_ACCESSOR: any;
export class Dropdown implements OnInit, AfterViewInit, AfterContentInit, AfterViewChecked, DoCheck, OnDestroy, ControlValueAccessor {
    el: ElementRef;
    domHandler: DomHandler;
    renderer: Renderer;
    private cd;
    objectUtils: ObjectUtils;
    options: SelectItem[];
    scrollHeight: string;
    filter: boolean;
    style: any;
    panelStyle: any;
    styleClass: string;
    panelStyleClass: string;
    disabled: boolean;
    readonly: boolean;
    autoWidth: boolean;
    required: boolean;
    editable: boolean;
    appendTo: any;
    tabindex: number;
    placeholder: string;
    onChange: EventEmitter<any>;
    onFocus: EventEmitter<any>;
    onBlur: EventEmitter<any>;
    containerViewChild: ElementRef;
    panelViewChild: ElementRef;
    itemsWrapperViewChild: ElementRef;
    filterViewChild: ElementRef;
    templates: QueryList<any>;
    itemTemplate: TemplateRef<any>;
    selectedOption: SelectItem;
    value: any;
    onModelChange: Function;
    onModelTouched: Function;
    optionsToDisplay: SelectItem[];
    hover: boolean;
    focus: boolean;
    differ: any;
    panelVisible: boolean;
    documentClickListener: any;
    optionsChanged: boolean;
    panel: HTMLDivElement;
    container: HTMLDivElement;
    itemsWrapper: HTMLDivElement;
    initialized: boolean;
    selfClick: boolean;
    itemClick: boolean;
    hoveredItem: any;
    selectedOptionUpdated: boolean;
    constructor(el: ElementRef, domHandler: DomHandler, renderer: Renderer, differs: IterableDiffers, cd: ChangeDetectorRef, objectUtils: ObjectUtils);
    ngAfterContentInit(): void;
    ngOnInit(): void;
    ngDoCheck(): void;
    ngAfterViewInit(): void;
    readonly label: string;
    readonly editableLabel: string;
    onItemClick(event: any, option: any): void;
    selectItem(event: any, option: any): void;
    ngAfterViewChecked(): void;
    writeValue(value: any): void;
    updateSelectedOption(val: any): void;
    registerOnChange(fn: Function): void;
    registerOnTouched(fn: Function): void;
    setDisabledState(val: boolean): void;
    updateDimensions(): void;
    onMouseclick(event: any, input: any): void;
    onEditableInputClick(event: any): void;
    onEditableInputFocus(event: any): void;
    onEditableInputChange(event: any): void;
    show(panel: any, container: any): void;
    hide(): void;
    onInputFocus(event: any): void;
    onInputBlur(event: any): void;
    onKeydown(event: any): void;
    findListItem(element: any): any;
    findOptionIndex(val: any, opts: SelectItem[]): number;
    findOption(val: any, opts: SelectItem[]): SelectItem;
    onFilter(event: any): void;
    applyFocus(): void;
    bindDocumentClickListener(): void;
    unbindDocumentClickListener(): void;
    ngOnDestroy(): void;
}
export class DropdownModule {
}
}
declare module 'primeng/components/dropdown/dropdown' {
export * from '~primeng/components/dropdown/dropdown';
}

// Generated by typings
// Source: node_modules/primeng/components/editor/editor.d.ts
declare module '~primeng/components/editor/editor' {
import { ElementRef, AfterViewInit, EventEmitter } from '@angular/core';
import { DomHandler } from '~primeng/components/dom/domhandler';
import { ControlValueAccessor } from '@angular/forms';
export const EDITOR_VALUE_ACCESSOR: any;
export class Editor implements AfterViewInit, ControlValueAccessor {
    el: ElementRef;
    domHandler: DomHandler;
    onTextChange: EventEmitter<any>;
    onSelectionChange: EventEmitter<any>;
    toolbar: any;
    style: any;
    styleClass: string;
    placeholder: string;
    readOnly: boolean;
    formats: string[];
    value: string;
    onModelChange: Function;
    onModelTouched: Function;
    quill: any;
    constructor(el: ElementRef, domHandler: DomHandler);
    ngAfterViewInit(): void;
    writeValue(value: any): void;
    registerOnChange(fn: Function): void;
    registerOnTouched(fn: Function): void;
}
export class EditorModule {
}
}
declare module 'primeng/components/editor/editor' {
export * from '~primeng/components/editor/editor';
}

// Generated by typings
// Source: node_modules/primeng/components/fieldset/fieldset.d.ts
declare module '~primeng/components/fieldset/fieldset' {
import { EventEmitter, ElementRef } from '@angular/core';
import { BlockableUI } from '~primeng/components/common/api';
export class Fieldset implements BlockableUI {
    private el;
    legend: string;
    toggleable: boolean;
    collapsed: boolean;
    onBeforeToggle: EventEmitter<any>;
    onAfterToggle: EventEmitter<any>;
    style: any;
    styleClass: string;
    animating: boolean;
    constructor(el: ElementRef);
    toggle(event: any): void;
    expand(event: any): void;
    collapse(event: any): void;
    getBlockableElement(): HTMLElement;
}
export class FieldsetModule {
}
}
declare module 'primeng/components/fieldset/fieldset' {
export * from '~primeng/components/fieldset/fieldset';
}

// Generated by typings
// Source: node_modules/primeng/components/fileupload/fileupload.d.ts
declare module '~primeng/components/fileupload/fileupload' {
import { OnInit, EventEmitter, TemplateRef, AfterContentInit, QueryList } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
import { Message } from '~primeng/components/common/api';
export class FileUpload implements OnInit, AfterContentInit {
    private sanitizer;
    name: string;
    url: string;
    multiple: boolean;
    accept: string;
    disabled: boolean;
    auto: boolean;
    maxFileSize: number;
    invalidFileSizeMessageSummary: string;
    invalidFileSizeMessageDetail: string;
    style: string;
    styleClass: string;
    previewWidth: number;
    chooseLabel: string;
    uploadLabel: string;
    cancelLabel: string;
    onBeforeUpload: EventEmitter<any>;
    onBeforeSend: EventEmitter<any>;
    onUpload: EventEmitter<any>;
    onError: EventEmitter<any>;
    onClear: EventEmitter<any>;
    onSelect: EventEmitter<any>;
    templates: QueryList<any>;
    files: File[];
    progress: number;
    dragHighlight: boolean;
    msgs: Message[];
    fileTemplate: TemplateRef<any>;
    contentTemplate: TemplateRef<any>;
    toolbarTemplate: TemplateRef<any>;
    constructor(sanitizer: DomSanitizer);
    ngOnInit(): void;
    ngAfterContentInit(): void;
    onChooseClick(event: any, fileInput: any): void;
    onFileSelect(event: any): void;
    validate(file: File): boolean;
    isImage(file: File): boolean;
    onImageLoad(img: any): void;
    upload(): void;
    clear(): void;
    remove(index: number): void;
    hasFiles(): boolean;
    onDragEnter(e: any): void;
    onDragOver(e: any): void;
    onDragLeave(e: any): void;
    onDrop(e: any): void;
    formatSize(bytes: any): string;
}
export class FileUploadModule {
}
}
declare module 'primeng/components/fileupload/fileupload' {
export * from '~primeng/components/fileupload/fileupload';
}

// Generated by typings
// Source: node_modules/primeng/components/galleria/galleria.d.ts
declare module '~primeng/components/galleria/galleria' {
import { ElementRef, AfterViewChecked, AfterViewInit, OnDestroy, IterableDiffers, EventEmitter } from '@angular/core';
import { DomHandler } from '~primeng/components/dom/domhandler';
export class Galleria implements AfterViewChecked, AfterViewInit, OnDestroy {
    el: ElementRef;
    domHandler: DomHandler;
    images: any[];
    style: any;
    styleClass: string;
    panelWidth: number;
    panelHeight: number;
    frameWidth: number;
    frameHeight: number;
    activeIndex: number;
    showFilmstrip: boolean;
    autoPlay: boolean;
    transitionInterval: number;
    showCaption: boolean;
    onImageClicked: EventEmitter<{}>;
    differ: any;
    slideshowActive: boolean;
    container: any;
    panelWrapper: any;
    panels: any;
    caption: any;
    stripWrapper: any;
    strip: any;
    frames: any;
    interval: any;
    stripLeft: number;
    imagesChanged: boolean;
    initialized: boolean;
    constructor(el: ElementRef, domHandler: DomHandler, differs: IterableDiffers);
    ngAfterViewChecked(): void;
    ngDoCheck(): void;
    ngAfterViewInit(): void;
    render(): void;
    startSlideshow(): void;
    stopSlideshow(): void;
    clickNavRight(): void;
    clickNavLeft(): void;
    frameClick(frame: any): void;
    prev(): void;
    next(): void;
    select(index: any, reposition: any): void;
    clickImage(event: any, image: any, i: any): void;
    ngOnDestroy(): void;
}
export class GalleriaModule {
}
}
declare module 'primeng/components/galleria/galleria' {
export * from '~primeng/components/galleria/galleria';
}

// Generated by typings
// Source: node_modules/primeng/components/gmap/gmap.d.ts
declare module '~primeng/components/gmap/gmap' {
import { ElementRef, AfterViewInit, DoCheck, EventEmitter, IterableDiffers, ChangeDetectorRef, NgZone } from '@angular/core';
export class GMap implements AfterViewInit, DoCheck {
    el: ElementRef;
    cd: ChangeDetectorRef;
    zone: NgZone;
    style: any;
    styleClass: string;
    options: any;
    overlays: any[];
    onMapClick: EventEmitter<any>;
    onOverlayClick: EventEmitter<any>;
    onOverlayDragStart: EventEmitter<any>;
    onOverlayDrag: EventEmitter<any>;
    onOverlayDragEnd: EventEmitter<any>;
    differ: any;
    map: any;
    constructor(el: ElementRef, differs: IterableDiffers, cd: ChangeDetectorRef, zone: NgZone);
    ngAfterViewInit(): void;
    bindOverlayEvents(overlay: any): void;
    ngDoCheck(): void;
    bindDragEvents(overlay: any): void;
    getMap(): any;
}
export class GMapModule {
}
}
declare module 'primeng/components/gmap/gmap' {
export * from '~primeng/components/gmap/gmap';
}

// Generated by typings
// Source: node_modules/primeng/components/growl/growl.d.ts
declare module '~primeng/components/growl/growl' {
import { ElementRef, AfterViewInit, DoCheck, OnDestroy, IterableDiffers } from '@angular/core';
import { Message } from '~primeng/components/common/api';
import { DomHandler } from '~primeng/components/dom/domhandler';
export class Growl implements AfterViewInit, DoCheck, OnDestroy {
    el: ElementRef;
    domHandler: DomHandler;
    sticky: boolean;
    life: number;
    value: Message[];
    style: any;
    styleClass: string;
    containerViewChild: ElementRef;
    differ: any;
    zIndex: number;
    container: HTMLDivElement;
    stopDoCheckPropagation: boolean;
    timeout: any;
    constructor(el: ElementRef, domHandler: DomHandler, differs: IterableDiffers);
    ngAfterViewInit(): void;
    ngDoCheck(): void;
    remove(msg: Message, msgel: any): void;
    removeAll(): void;
    findMessageIndex(msg: Message): number;
    ngOnDestroy(): void;
}
export class GrowlModule {
}
}
declare module 'primeng/components/growl/growl' {
export * from '~primeng/components/growl/growl';
}

// Generated by typings
// Source: node_modules/primeng/components/inplace/inplace.d.ts
declare module '~primeng/components/inplace/inplace' {
import { EventEmitter } from '@angular/core';
export class InplaceDisplay {
}
export class InplaceContent {
}
export class Inplace {
    active: boolean;
    closable: boolean;
    disabled: boolean;
    style: any;
    styleClass: string;
    onActivate: EventEmitter<any>;
    onDeactivate: EventEmitter<any>;
    hover: boolean;
    activate(event: any): void;
    deactivate(event: any): void;
}
export class InplaceModule {
}
}
declare module 'primeng/components/inplace/inplace' {
export * from '~primeng/components/inplace/inplace';
}

// Generated by typings
// Source: node_modules/primeng/components/inputmask/inputmask.d.ts
declare module '~primeng/components/inputmask/inputmask' {
import { ElementRef, AfterViewInit, OnDestroy, EventEmitter } from '@angular/core';
import { DomHandler } from '~primeng/components/dom/domhandler';
import { ControlValueAccessor } from '@angular/forms';
export const INPUTMASK_VALUE_ACCESSOR: any;
export class InputMask implements AfterViewInit, OnDestroy, ControlValueAccessor {
    el: ElementRef;
    domHandler: DomHandler;
    mask: string;
    type: string;
    slotChar: string;
    autoClear: boolean;
    style: string;
    styleClass: string;
    placeholder: string;
    size: number;
    maxlength: number;
    tabindex: string;
    disabled: boolean;
    readonly: boolean;
    unmask: boolean;
    name: string;
    onComplete: EventEmitter<any>;
    value: any;
    onModelChange: Function;
    onModelTouched: Function;
    input: HTMLInputElement;
    filled: boolean;
    defs: any;
    tests: any[];
    partialPosition: any;
    firstNonMaskPos: number;
    lastRequiredNonMaskPos: any;
    len: number;
    oldVal: string;
    buffer: any;
    defaultBuffer: string;
    focusText: string;
    caretTimeoutId: any;
    androidChrome: boolean;
    focus: boolean;
    constructor(el: ElementRef, domHandler: DomHandler);
    ngAfterViewInit(): void;
    writeValue(value: any): void;
    registerOnChange(fn: Function): void;
    registerOnTouched(fn: Function): void;
    setDisabledState(val: boolean): void;
    caret(first?: number, last?: number): {
        begin: any;
        end: any;
    };
    isCompleted(): boolean;
    getPlaceholder(i: number): string;
    seekNext(pos: any): any;
    seekPrev(pos: any): any;
    shiftL(begin: number, end: number): void;
    shiftR(pos: any): void;
    handleAndroidInput(e: any): void;
    onBlur(e: any): void;
    onKeyDown(e: any): void;
    onKeyPress(e: any): void;
    clearBuffer(start: any, end: any): void;
    writeBuffer(): void;
    checkVal(allow?: boolean): any;
    onFocus(event: any): void;
    onInput(event: any): void;
    handleInputChange(event: any): void;
    getUnmaskedValue(): string;
    updateModel(e: any): void;
    updateFilledState(): void;
    ngOnDestroy(): void;
}
export class InputMaskModule {
}
}
declare module 'primeng/components/inputmask/inputmask' {
export * from '~primeng/components/inputmask/inputmask';
}

// Generated by typings
// Source: node_modules/primeng/components/inputswitch/inputswitch.d.ts
declare module '~primeng/components/inputswitch/inputswitch' {
import { ElementRef, AfterViewInit, AfterViewChecked, EventEmitter } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { DomHandler } from '~primeng/components/dom/domhandler';
export const INPUTSWITCH_VALUE_ACCESSOR: any;
export class InputSwitch implements ControlValueAccessor, AfterViewInit, AfterViewChecked {
    el: ElementRef;
    domHandler: DomHandler;
    onLabel: string;
    offLabel: string;
    disabled: boolean;
    style: any;
    styleClass: string;
    tabindex: number;
    onChange: EventEmitter<any>;
    checked: boolean;
    focused: boolean;
    onModelChange: Function;
    onModelTouched: Function;
    container: any;
    handle: any;
    onContainer: any;
    offContainer: any;
    onLabelChild: any;
    offLabelChild: any;
    offset: any;
    initialized: boolean;
    constructor(el: ElementRef, domHandler: DomHandler);
    ngAfterViewInit(): void;
    ngAfterViewChecked(): void;
    render(): void;
    toggle(event: any, checkbox: any): void;
    checkUI(): void;
    uncheckUI(): void;
    onFocus(event: any): void;
    onBlur(event: any): void;
    writeValue(checked: any): void;
    registerOnChange(fn: Function): void;
    registerOnTouched(fn: Function): void;
    setDisabledState(val: boolean): void;
}
export class InputSwitchModule {
}
}
declare module 'primeng/components/inputswitch/inputswitch' {
export * from '~primeng/components/inputswitch/inputswitch';
}

// Generated by typings
// Source: node_modules/primeng/components/inputtext/inputtext.d.ts
declare module '~primeng/components/inputtext/inputtext' {
import { ElementRef } from '@angular/core';
export class InputText {
    el: ElementRef;
    constructor(el: ElementRef);
    readonly filled: boolean;
    onBlur(e: any): void;
}
export class InputTextModule {
}
}
declare module 'primeng/components/inputtext/inputtext' {
export * from '~primeng/components/inputtext/inputtext';
}

// Generated by typings
// Source: node_modules/primeng/components/inputtextarea/inputtextarea.d.ts
declare module '~primeng/components/inputtextarea/inputtextarea' {
import { ElementRef, OnInit } from '@angular/core';
export class InputTextarea implements OnInit {
    el: ElementRef;
    autoResize: boolean;
    rows: number;
    cols: number;
    rowsDefault: number;
    colsDefault: number;
    constructor(el: ElementRef);
    ngOnInit(): void;
    onFocus(e: any): void;
    onBlur(e: any): void;
    onKeyup(e: any): void;
    resize(): void;
    readonly filled: boolean;
}
export class InputTextareaModule {
}
}
declare module 'primeng/components/inputtextarea/inputtextarea' {
export * from '~primeng/components/inputtextarea/inputtextarea';
}

// Generated by typings
// Source: node_modules/primeng/components/lightbox/lightbox.d.ts
declare module '~primeng/components/lightbox/lightbox' {
import { ElementRef, Renderer, AfterViewInit, OnDestroy } from '@angular/core';
import { DomHandler } from '~primeng/components/dom/domhandler';
export class Lightbox implements AfterViewInit, OnDestroy {
    el: ElementRef;
    domHandler: DomHandler;
    renderer: Renderer;
    images: any[];
    type: string;
    style: any;
    styleClass: string;
    appendTo: any;
    easing: 'ease-out';
    effectDuration: any;
    visible: boolean;
    loading: boolean;
    currentImage: any;
    captionText: string;
    zindex: any;
    panel: any;
    index: number;
    mask: any;
    preventDocumentClickListener: boolean;
    documentClickListener: any;
    constructor(el: ElementRef, domHandler: DomHandler, renderer: Renderer);
    onImageClick(event: any, image: any, i: any, content: any): void;
    ngAfterViewInit(): void;
    onLinkClick(event: any, content: any): void;
    displayImage(image: any): void;
    show(): void;
    hide(event: any): void;
    center(): void;
    onImageLoad(event: any, content: any): void;
    prev(placeholder: any): void;
    next(placeholder: any): void;
    readonly leftVisible: boolean;
    readonly rightVisible: boolean;
    ngOnDestroy(): void;
}
export class LightboxModule {
}
}
declare module 'primeng/components/lightbox/lightbox' {
export * from '~primeng/components/lightbox/lightbox';
}

// Generated by typings
// Source: node_modules/primeng/components/listbox/listbox.d.ts
declare module '~primeng/components/listbox/listbox' {
import { ElementRef, EventEmitter, AfterContentInit, QueryList, TemplateRef } from '@angular/core';
import { SelectItem } from '~primeng/components/common/api';
import { DomHandler } from '~primeng/components/dom/domhandler';
import { ObjectUtils } from '~primeng/components/utils/ObjectUtils';
import { ControlValueAccessor } from '@angular/forms';
export const LISTBOX_VALUE_ACCESSOR: any;
export class Listbox implements AfterContentInit, ControlValueAccessor {
    el: ElementRef;
    domHandler: DomHandler;
    objectUtils: ObjectUtils;
    options: SelectItem[];
    multiple: boolean;
    style: any;
    styleClass: string;
    disabled: boolean;
    checkbox: boolean;
    filter: boolean;
    metaKeySelection: boolean;
    onChange: EventEmitter<any>;
    onDblClick: EventEmitter<any>;
    templates: QueryList<any>;
    itemTemplate: TemplateRef<any>;
    filterValue: string;
    visibleOptions: SelectItem[];
    filtered: boolean;
    value: any;
    onModelChange: Function;
    onModelTouched: Function;
    checkboxClick: boolean;
    optionTouched: boolean;
    constructor(el: ElementRef, domHandler: DomHandler, objectUtils: ObjectUtils);
    ngAfterContentInit(): void;
    writeValue(value: any): void;
    registerOnChange(fn: Function): void;
    registerOnTouched(fn: Function): void;
    setDisabledState(val: boolean): void;
    onOptionClick(event: any, option: any): void;
    onOptionTouchEnd(event: any, option: any): void;
    onOptionClickSingle(event: any, option: any): void;
    onOptionClickMultiple(event: any, option: any): void;
    isSelected(option: SelectItem): boolean;
    findIndex(option: SelectItem): number;
    isAllChecked(): boolean;
    onFilter(event: any): void;
    toggleAll(event: any, checkbox: any): void;
    getVisibleOptions(): SelectItem[];
    isItemVisible(option: SelectItem): boolean;
    onDoubleClick(event: Event, option: SelectItem): any;
    onCheckboxClick(event: Event, option: SelectItem): void;
}
export class ListboxModule {
}
}
declare module 'primeng/components/listbox/listbox' {
export * from '~primeng/components/listbox/listbox';
}

// Generated by typings
// Source: node_modules/primeng/components/megamenu/megamenu.d.ts
declare module '~primeng/components/megamenu/megamenu' {
import { ElementRef, OnDestroy, Renderer } from '@angular/core';
import { DomHandler } from '~primeng/components/dom/domhandler';
import { MenuItem } from '~primeng/components/common/api';
import { Router } from '@angular/router';
export class MegaMenu implements OnDestroy {
    el: ElementRef;
    domHandler: DomHandler;
    renderer: Renderer;
    router: Router;
    model: MenuItem[];
    style: any;
    styleClass: string;
    orientation: string;
    activeItem: any;
    constructor(el: ElementRef, domHandler: DomHandler, renderer: Renderer, router: Router);
    onItemMouseEnter(event: any, item: any, menuitem: MenuItem): void;
    onItemMouseLeave(event: any, link: any): void;
    itemClick(event: any, item: MenuItem): void;
    unsubscribe(item: any): void;
    ngOnDestroy(): void;
    getColumnClass(menuitem: MenuItem): any;
}
export class MegaMenuModule {
}
}
declare module 'primeng/components/megamenu/megamenu' {
export * from '~primeng/components/megamenu/megamenu';
}

// Generated by typings
// Source: node_modules/primeng/components/menu/menu.d.ts
declare module '~primeng/components/menu/menu' {
import { ElementRef, AfterViewInit, OnDestroy, Renderer } from '@angular/core';
import { DomHandler } from '~primeng/components/dom/domhandler';
import { MenuItem } from '~primeng/components/common/api';
import { Router } from '@angular/router';
export class Menu implements AfterViewInit, OnDestroy {
    el: ElementRef;
    domHandler: DomHandler;
    renderer: Renderer;
    router: Router;
    model: MenuItem[];
    popup: boolean;
    style: any;
    styleClass: string;
    appendTo: any;
    containerViewChild: ElementRef;
    container: HTMLDivElement;
    documentClickListener: any;
    preventDocumentDefault: any;
    onResizeTarget: any;
    constructor(el: ElementRef, domHandler: DomHandler, renderer: Renderer, router: Router);
    ngAfterViewInit(): void;
    toggle(event: any): void;
    onResize(event: any): void;
    show(event: any): void;
    hide(): void;
    itemClick(event: any, item: MenuItem): void;
    ngOnDestroy(): void;
    hasSubMenu(): boolean;
    unsubscribe(item: any): void;
}
export class MenuModule {
}
}
declare module 'primeng/components/menu/menu' {
export * from '~primeng/components/menu/menu';
}

// Generated by typings
// Source: node_modules/primeng/components/menubar/menubar.d.ts
declare module '~primeng/components/menubar/menubar' {
import { ElementRef, OnDestroy, Renderer } from '@angular/core';
import { DomHandler } from '~primeng/components/dom/domhandler';
import { MenuItem } from '~primeng/components/common/api';
import { Router } from '@angular/router';
export class MenubarSub {
    domHandler: DomHandler;
    router: Router;
    item: MenuItem;
    root: boolean;
    constructor(domHandler: DomHandler, router: Router);
    activeItem: any;
    onItemMouseEnter(event: any, item: any, menuitem: MenuItem): void;
    onItemMouseLeave(event: any, link: any): void;
    itemClick(event: any, item: MenuItem): void;
    listClick(event: any): void;
}
export class Menubar implements OnDestroy {
    el: ElementRef;
    domHandler: DomHandler;
    renderer: Renderer;
    model: MenuItem[];
    style: any;
    styleClass: string;
    constructor(el: ElementRef, domHandler: DomHandler, renderer: Renderer);
    unsubscribe(item: any): void;
    ngOnDestroy(): void;
}
export class MenubarModule {
}
}
declare module 'primeng/components/menubar/menubar' {
export * from '~primeng/components/menubar/menubar';
}

// Generated by typings
// Source: node_modules/primeng/components/messages/messages.d.ts
declare module '~primeng/components/messages/messages' {
import { Message } from '~primeng/components/common/api';
export class Messages {
    value: Message[];
    closable: boolean;
    hasMessages(): boolean;
    getSeverityClass(): string;
    clear(event: any): void;
    readonly icon: string;
}
export class MessagesModule {
}
}
declare module 'primeng/components/messages/messages' {
export * from '~primeng/components/messages/messages';
}

// Generated by typings
// Source: node_modules/primeng/components/multiselect/multiselect.d.ts
declare module '~primeng/components/multiselect/multiselect' {
import { ElementRef, OnInit, AfterViewInit, AfterViewChecked, DoCheck, OnDestroy, Renderer, EventEmitter, IterableDiffers } from '@angular/core';
import { SelectItem } from '~primeng/components/common/api';
import { DomHandler } from '~primeng/components/dom/domhandler';
import { ControlValueAccessor } from '@angular/forms';
export const MULTISELECT_VALUE_ACCESSOR: any;
export class MultiSelect implements OnInit, AfterViewInit, AfterViewChecked, DoCheck, OnDestroy, ControlValueAccessor {
    el: ElementRef;
    domHandler: DomHandler;
    renderer: Renderer;
    options: SelectItem[];
    onChange: EventEmitter<any>;
    scrollHeight: string;
    defaultLabel: string;
    style: any;
    styleClass: string;
    disabled: boolean;
    overlayVisible: boolean;
    tabindex: number;
    appendTo: any;
    containerViewChild: ElementRef;
    panelViewChild: ElementRef;
    value: any[];
    onModelChange: Function;
    onModelTouched: Function;
    valuesAsString: string;
    focus: boolean;
    documentClickListener: any;
    container: HTMLDivElement;
    panel: HTMLDivElement;
    selfClick: boolean;
    panelClick: boolean;
    filterValue: string;
    visibleOptions: SelectItem[];
    filtered: boolean;
    differ: any;
    constructor(el: ElementRef, domHandler: DomHandler, renderer: Renderer, differs: IterableDiffers);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngAfterViewChecked(): void;
    ngDoCheck(): void;
    writeValue(value: any): void;
    registerOnChange(fn: Function): void;
    registerOnTouched(fn: Function): void;
    setDisabledState(val: boolean): void;
    onItemClick(event: any, value: any): void;
    isSelected(value: any): boolean;
    findSelectionIndex(val: any): number;
    toggleAll(event: any, checkbox: any): void;
    isAllChecked(): boolean;
    show(): void;
    hide(): void;
    close(event: any): void;
    onMouseclick(event: any, input: any): void;
    onFocus(event: any): void;
    onBlur(event: any): void;
    updateLabel(): void;
    findLabelByValue(val: any): string;
    onFilter(event: any): void;
    isItemVisible(option: SelectItem): boolean;
    getVisibleOptions(): SelectItem[];
    ngOnDestroy(): void;
}
export class MultiSelectModule {
}
}
declare module 'primeng/components/multiselect/multiselect' {
export * from '~primeng/components/multiselect/multiselect';
}

// Generated by typings
// Source: node_modules/primeng/components/orderlist/orderlist.d.ts
declare module '~primeng/components/orderlist/orderlist' {
import { ElementRef, AfterViewChecked, AfterContentInit, QueryList, TemplateRef, EventEmitter } from '@angular/core';
import { DomHandler } from '~primeng/components/dom/domhandler';
export class OrderList implements AfterViewChecked, AfterContentInit {
    el: ElementRef;
    domHandler: DomHandler;
    value: any[];
    header: string;
    style: any;
    styleClass: string;
    listStyle: any;
    responsive: boolean;
    metaKeySelection: boolean;
    onReorder: EventEmitter<any>;
    templates: QueryList<any>;
    itemTemplate: TemplateRef<any>;
    selectedItems: any[];
    movedUp: boolean;
    movedDown: boolean;
    listContainer: any;
    itemTouched: boolean;
    constructor(el: ElementRef, domHandler: DomHandler);
    ngAfterViewInit(): void;
    ngAfterContentInit(): void;
    ngAfterViewChecked(): void;
    onItemClick(event: any, item: any): void;
    onItemTouchEnd(event: any): void;
    isSelected(item: any): boolean;
    findIndexInList(item: any, list: any): number;
    moveUp(event: any, listElement: any): void;
    moveTop(event: any, listElement: any): void;
    moveDown(event: any, listElement: any): void;
    moveBottom(event: any, listElement: any): void;
}
export class OrderListModule {
}
}
declare module 'primeng/components/orderlist/orderlist' {
export * from '~primeng/components/orderlist/orderlist';
}

// Generated by typings
// Source: node_modules/primeng/components/overlaypanel/overlaypanel.d.ts
declare module '~primeng/components/overlaypanel/overlaypanel' {
import { OnInit, AfterViewInit, OnDestroy, EventEmitter, Renderer, ElementRef } from '@angular/core';
import { DomHandler } from '~primeng/components/dom/domhandler';
export class OverlayPanel implements OnInit, AfterViewInit, OnDestroy {
    el: ElementRef;
    domHandler: DomHandler;
    renderer: Renderer;
    dismissable: boolean;
    showCloseIcon: boolean;
    style: any;
    styleClass: string;
    appendTo: any;
    onBeforeShow: EventEmitter<any>;
    onAfterShow: EventEmitter<any>;
    onBeforeHide: EventEmitter<any>;
    onAfterHide: EventEmitter<any>;
    container: any;
    visible: boolean;
    documentClickListener: any;
    selfClick: boolean;
    targetEvent: boolean;
    target: any;
    constructor(el: ElementRef, domHandler: DomHandler, renderer: Renderer);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    toggle(event: any, target?: any): void;
    show(event: any, target?: any): void;
    hide(): void;
    onPanelClick(): void;
    onCloseClick(event: any): void;
    ngOnDestroy(): void;
}
export class OverlayPanelModule {
}
}
declare module 'primeng/components/overlaypanel/overlaypanel' {
export * from '~primeng/components/overlaypanel/overlaypanel';
}

// Generated by typings
// Source: node_modules/primeng/components/paginator/paginator.d.ts
declare module '~primeng/components/paginator/paginator' {
import { EventEmitter } from '@angular/core';
export class Paginator {
    pageLinkSize: number;
    onPageChange: EventEmitter<any>;
    style: any;
    styleClass: string;
    rowsPerPageOptions: number[];
    pageLinks: number[];
    _totalRecords: number;
    _first: number;
    _rows: number;
    totalRecords: number;
    first: number;
    rows: number;
    isFirstPage(): boolean;
    isLastPage(): boolean;
    getPageCount(): number;
    calculatePageLinkBoundaries(): number[];
    updatePageLinks(): void;
    changePage(p: number, event: any): void;
    getPage(): number;
    changePageToFirst(event: any): void;
    changePageToPrev(event: any): void;
    changePageToNext(event: any): void;
    changePageToLast(event: any): void;
    onRppChange(event: any): void;
}
export class PaginatorModule {
}
}
declare module 'primeng/components/paginator/paginator' {
export * from '~primeng/components/paginator/paginator';
}

// Generated by typings
// Source: node_modules/primeng/components/panel/panel.d.ts
declare module '~primeng/components/panel/panel' {
import { EventEmitter, ElementRef } from '@angular/core';
import { BlockableUI } from '~primeng/components/common/api';
export class Panel implements BlockableUI {
    private el;
    toggleable: boolean;
    header: string;
    collapsed: boolean;
    style: any;
    styleClass: string;
    collapsedChange: EventEmitter<any>;
    onBeforeToggle: EventEmitter<any>;
    onAfterToggle: EventEmitter<any>;
    animating: boolean;
    constructor(el: ElementRef);
    toggle(event: any): void;
    expand(event: any): void;
    collapse(event: any): void;
    getBlockableElement(): HTMLElement;
}
export class PanelModule {
}
}
declare module 'primeng/components/panel/panel' {
export * from '~primeng/components/panel/panel';
}

// Generated by typings
// Source: node_modules/primeng/components/panelmenu/panelmenu.d.ts
declare module '~primeng/components/panelmenu/panelmenu' {
import { MenuItem } from '~primeng/components/common/api';
import { Router } from '@angular/router';
export class BasePanelMenuItem {
    router: Router;
    constructor(router: Router);
    handleClick(event: any, item: any): void;
}
export class PanelMenuSub extends BasePanelMenuItem {
    item: MenuItem;
    expanded: boolean;
    constructor(router: Router);
}
export class PanelMenu extends BasePanelMenuItem {
    model: MenuItem[];
    style: any;
    styleClass: string;
    animating: boolean;
    constructor(router: Router);
    unsubscribe(item: any): void;
    ngOnDestroy(): void;
    handleClick(event: any, item: any): void;
}
export class PanelMenuModule {
}
}
declare module 'primeng/components/panelmenu/panelmenu' {
export * from '~primeng/components/panelmenu/panelmenu';
}

// Generated by typings
// Source: node_modules/primeng/components/password/password.d.ts
declare module '~primeng/components/password/password' {
import { ElementRef, AfterViewInit, OnDestroy } from '@angular/core';
import { DomHandler } from '~primeng/components/dom/domhandler';
export class Password implements AfterViewInit, OnDestroy {
    el: ElementRef;
    domHandler: DomHandler;
    promptLabel: string;
    weakLabel: string;
    mediumLabel: string;
    strongLabel: string;
    panel: any;
    meter: any;
    info: any;
    constructor(el: ElementRef, domHandler: DomHandler);
    ngAfterViewInit(): void;
    onFocus(e: any): void;
    onBlur(e: any): void;
    onKeyup(e: any): void;
    testStrength(str: string): number;
    normalize(x: any, y: any): number;
    readonly disabled: boolean;
    readonly filled: boolean;
    ngOnDestroy(): void;
}
export class PasswordModule {
}
}
declare module 'primeng/components/password/password' {
export * from '~primeng/components/password/password';
}

// Generated by typings
// Source: node_modules/primeng/components/picklist/picklist.d.ts
declare module '~primeng/components/picklist/picklist' {
import { ElementRef, OnDestroy, AfterContentInit, AfterViewChecked, QueryList, TemplateRef, EventEmitter } from '@angular/core';
import { DomHandler } from '~primeng/components/dom/domhandler';
export class PickList implements OnDestroy, AfterViewChecked, AfterContentInit {
    el: ElementRef;
    domHandler: DomHandler;
    source: any[];
    target: any[];
    sourceHeader: string;
    targetHeader: string;
    responsive: boolean;
    metaKeySelection: boolean;
    style: any;
    styleClass: string;
    sourceStyle: any;
    targetStyle: any;
    showSourceControls: boolean;
    showTargetControls: boolean;
    onMoveToSource: EventEmitter<any>;
    onMoveToTarget: EventEmitter<any>;
    onSourceReorder: EventEmitter<any>;
    onTargetReorder: EventEmitter<any>;
    templates: QueryList<any>;
    itemTemplate: TemplateRef<any>;
    selectedItemsSource: any[];
    selectedItemsTarget: any[];
    reorderedListElement: any;
    movedUp: boolean;
    movedDown: boolean;
    itemTouched: boolean;
    constructor(el: ElementRef, domHandler: DomHandler);
    ngAfterContentInit(): void;
    ngAfterViewChecked(): void;
    onItemClick(event: any, item: any, selectedItems: any[]): void;
    onItemTouchEnd(event: any): void;
    moveUp(listElement: any, list: any, selectedItems: any, callback: any): void;
    moveTop(listElement: any, list: any, selectedItems: any, callback: any): void;
    moveDown(listElement: any, list: any, selectedItems: any, callback: any): void;
    moveBottom(listElement: any, list: any, selectedItems: any, callback: any): void;
    moveRight(targetListElement: any): void;
    moveAllRight(): void;
    moveLeft(sourceListElement: any): void;
    moveAllLeft(): void;
    isSelected(item: any, selectedItems: any[]): boolean;
    findIndexInSelection(item: any, selectedItems: any[]): number;
    findIndexInList(item: any, list: any): number;
    ngOnDestroy(): void;
}
export class PickListModule {
}
}
declare module 'primeng/components/picklist/picklist' {
export * from '~primeng/components/picklist/picklist';
}

// Generated by typings
// Source: node_modules/primeng/components/progressbar/progressbar.d.ts
declare module '~primeng/components/progressbar/progressbar' {
export class ProgressBar {
    value: any;
    showValue: boolean;
    unit: string;
}
export class ProgressBarModule {
}
}
declare module 'primeng/components/progressbar/progressbar' {
export * from '~primeng/components/progressbar/progressbar';
}

// Generated by typings
// Source: node_modules/primeng/components/radiobutton/radiobutton.d.ts
declare module '~primeng/components/radiobutton/radiobutton' {
import { AfterViewInit, ElementRef, EventEmitter, ChangeDetectorRef } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
export const RADIO_VALUE_ACCESSOR: any;
export class RadioButton implements ControlValueAccessor, AfterViewInit {
    private cd;
    value: any;
    name: string;
    disabled: boolean;
    label: string;
    tabindex: number;
    onClick: EventEmitter<any>;
    inputViewChild: ElementRef;
    input: HTMLInputElement;
    onModelChange: Function;
    onModelTouched: Function;
    checked: boolean;
    focused: boolean;
    constructor(cd: ChangeDetectorRef);
    ngAfterViewInit(): void;
    handleClick(): void;
    select(): void;
    writeValue(value: any): void;
    registerOnChange(fn: Function): void;
    registerOnTouched(fn: Function): void;
    setDisabledState(val: boolean): void;
    onFocus(event: any): void;
    onBlur(event: any): void;
    onChange(event: any): void;
}
export class RadioButtonModule {
}
}
declare module 'primeng/components/radiobutton/radiobutton' {
export * from '~primeng/components/radiobutton/radiobutton';
}

// Generated by typings
// Source: node_modules/primeng/components/rating/rating.d.ts
declare module '~primeng/components/rating/rating' {
import { EventEmitter } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
export const RATING_VALUE_ACCESSOR: any;
export class Rating implements ControlValueAccessor {
    disabled: boolean;
    readonly: boolean;
    stars: number;
    cancel: boolean;
    onRate: EventEmitter<any>;
    onCancel: EventEmitter<any>;
    value: number;
    onModelChange: Function;
    onModelTouched: Function;
    starsArray: number[];
    ngOnInit(): void;
    rate(event: any, i: number): void;
    clear(event: any): void;
    writeValue(value: any): void;
    registerOnChange(fn: Function): void;
    registerOnTouched(fn: Function): void;
    setDisabledState(val: boolean): void;
}
export class RatingModule {
}
}
declare module 'primeng/components/rating/rating' {
export * from '~primeng/components/rating/rating';
}

// Generated by typings
// Source: node_modules/primeng/components/schedule/schedule.d.ts
declare module '~primeng/components/schedule/schedule' {
import { ElementRef, OnDestroy, DoCheck, EventEmitter, IterableDiffers, OnInit, OnChanges, AfterViewChecked, SimpleChanges } from '@angular/core';
export class Schedule implements DoCheck, OnDestroy, OnInit, OnChanges, AfterViewChecked {
    el: ElementRef;
    events: any[];
    header: any;
    style: any;
    styleClass: string;
    rtl: boolean;
    weekends: boolean;
    hiddenDays: number[];
    fixedWeekCount: boolean;
    weekNumbers: boolean;
    businessHours: any;
    height: any;
    contentHeight: any;
    aspectRatio: number;
    eventLimit: any;
    defaultDate: any;
    editable: boolean;
    droppable: boolean;
    eventStartEditable: boolean;
    eventDurationEditable: boolean;
    defaultView: string;
    allDaySlot: boolean;
    allDayText: string;
    slotDuration: any;
    slotLabelInterval: any;
    snapDuration: any;
    scrollTime: any;
    minTime: any;
    maxTime: any;
    slotEventOverlap: boolean;
    nowIndicator: boolean;
    dragRevertDuration: number;
    dragOpacity: number;
    dragScroll: boolean;
    eventOverlap: any;
    eventConstraint: any;
    locale: string;
    timezone: boolean | string;
    eventRender: Function;
    dayRender: Function;
    options: any;
    onDayClick: EventEmitter<any>;
    onDrop: EventEmitter<any>;
    onEventClick: EventEmitter<any>;
    onEventMouseover: EventEmitter<any>;
    onEventMouseout: EventEmitter<any>;
    onEventDragStart: EventEmitter<any>;
    onEventDragStop: EventEmitter<any>;
    onEventDrop: EventEmitter<any>;
    onEventResizeStart: EventEmitter<any>;
    onEventResizeStop: EventEmitter<any>;
    onEventResize: EventEmitter<any>;
    onViewRender: EventEmitter<any>;
    initialized: boolean;
    stopNgOnChangesPropagation: boolean;
    differ: any;
    schedule: any;
    config: any;
    constructor(el: ElementRef, differs: IterableDiffers);
    ngOnInit(): void;
    ngAfterViewChecked(): void;
    initialize(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngDoCheck(): void;
    ngOnDestroy(): void;
    gotoDate(date: any): void;
    prev(): void;
    next(): void;
    prevYear(): void;
    nextYear(): void;
    today(): void;
    incrementDate(duration: any): void;
    changeView(viewName: string): void;
    getDate(): any;
    findEvent(id: string): any;
    updateEvent(event: any): void;
}
export class ScheduleModule {
}
}
declare module 'primeng/components/schedule/schedule' {
export * from '~primeng/components/schedule/schedule';
}

// Generated by typings
// Source: node_modules/primeng/components/selectbutton/selectbutton.d.ts
declare module '~primeng/components/selectbutton/selectbutton' {
import { EventEmitter } from '@angular/core';
import { SelectItem } from '~primeng/components/common/api';
import { ControlValueAccessor } from '@angular/forms';
export const SELECTBUTTON_VALUE_ACCESSOR: any;
export class SelectButton implements ControlValueAccessor {
    options: SelectItem[];
    tabindex: number;
    multiple: boolean;
    style: any;
    styleClass: string;
    disabled: boolean;
    onChange: EventEmitter<any>;
    value: any;
    onModelChange: Function;
    onModelTouched: Function;
    writeValue(value: any): void;
    registerOnChange(fn: Function): void;
    registerOnTouched(fn: Function): void;
    setDisabledState(val: boolean): void;
    onItemClick(event: any, option: SelectItem): void;
    isSelected(option: SelectItem): boolean;
    findItemIndex(option: SelectItem): number;
}
export class SelectButtonModule {
}
}
declare module 'primeng/components/selectbutton/selectbutton' {
export * from '~primeng/components/selectbutton/selectbutton';
}

// Generated by typings
// Source: node_modules/primeng/components/slidemenu/slidemenu.d.ts
declare module '~primeng/components/slidemenu/slidemenu' {
import { ElementRef, AfterViewInit, OnDestroy, Renderer } from '@angular/core';
import { DomHandler } from '~primeng/components/dom/domhandler';
import { MenuItem } from '~primeng/components/common/api';
import { Router } from '@angular/router';
export class SlideMenuSub implements OnDestroy {
    slideMenu: SlideMenu;
    router: Router;
    item: MenuItem;
    root: boolean;
    backLabel: string;
    menuWidth: string;
    effectDuration: any;
    easing: string;
    constructor(slideMenu: SlideMenu, router: Router);
    activeItem: any;
    itemClick(event: any, item: MenuItem, listitem: any): void;
    ngOnDestroy(): void;
}
export class SlideMenu implements AfterViewInit, OnDestroy {
    el: ElementRef;
    domHandler: DomHandler;
    renderer: Renderer;
    model: MenuItem[];
    popup: boolean;
    style: any;
    styleClass: string;
    menuWidth: number;
    viewportHeight: number;
    effectDuration: any;
    easing: string;
    backLabel: string;
    containerViewChild: ElementRef;
    backwardViewChild: ElementRef;
    container: HTMLDivElement;
    backwardElement: HTMLDivElement;
    documentClickListener: any;
    preventDocumentDefault: any;
    left: number;
    animating: boolean;
    viewportContentHeight: number;
    constructor(el: ElementRef, domHandler: DomHandler, renderer: Renderer);
    ngAfterViewInit(): void;
    toggle(event: any): void;
    show(event: any): void;
    hide(): void;
    unsubscribe(item: any): void;
    onClick(event: any): void;
    goBack(): void;
    ngOnDestroy(): void;
}
export class SlideMenuModule {
}
}
declare module 'primeng/components/slidemenu/slidemenu' {
export * from '~primeng/components/slidemenu/slidemenu';
}

// Generated by typings
// Source: node_modules/primeng/components/slider/slider.d.ts
declare module '~primeng/components/slider/slider' {
import { ElementRef, AfterViewInit, OnDestroy, EventEmitter, Renderer } from '@angular/core';
import { DomHandler } from '~primeng/components/dom/domhandler';
import { ControlValueAccessor } from '@angular/forms';
export const SLIDER_VALUE_ACCESSOR: any;
export class Slider implements AfterViewInit, OnDestroy, ControlValueAccessor {
    el: ElementRef;
    domHandler: DomHandler;
    renderer: Renderer;
    animate: boolean;
    disabled: boolean;
    min: number;
    max: number;
    orientation: string;
    step: number;
    range: boolean;
    style: any;
    styleClass: string;
    onChange: EventEmitter<any>;
    onSlideEnd: EventEmitter<any>;
    value: number;
    values: number;
    handleValue: number;
    handleValues: number[];
    onModelChange: Function;
    onModelTouched: Function;
    dragging: boolean;
    dragListener: any;
    mouseupListener: any;
    initX: number;
    initY: number;
    barWidth: number;
    barHeight: number;
    sliderHandleClick: boolean;
    handleIndex: number;
    constructor(el: ElementRef, domHandler: DomHandler, renderer: Renderer);
    onMouseDown(event: Event, index?: number): void;
    onBarClick(event: any): void;
    ngAfterViewInit(): void;
    handleChange(event: Event): void;
    handleStepChange(newValue: number, oldValue: number): void;
    writeValue(value: any): void;
    registerOnChange(fn: Function): void;
    registerOnTouched(fn: Function): void;
    setDisabledState(val: boolean): void;
    updateDomData(): void;
    calculateHandleValue(event: any): number;
    updateHandleValue(): void;
    updateValue(val: number, event?: Event): void;
    getValueFromHandle(handleValue: number): number;
    ngOnDestroy(): void;
}
export class SliderModule {
}
}
declare module 'primeng/components/slider/slider' {
export * from '~primeng/components/slider/slider';
}

// Generated by typings
// Source: node_modules/primeng/components/spinner/spinner.d.ts
declare module '~primeng/components/spinner/spinner' {
import { ElementRef, OnInit, EventEmitter } from '@angular/core';
import { DomHandler } from '~primeng/components/dom/domhandler';
import { ControlValueAccessor } from '@angular/forms';
export const SPINNER_VALUE_ACCESSOR: any;
export class Spinner implements OnInit, ControlValueAccessor {
    el: ElementRef;
    domHandler: DomHandler;
    onChange: EventEmitter<any>;
    step: number;
    min: number;
    max: number;
    maxlength: number;
    size: number;
    placeholder: string;
    disabled: boolean;
    readonly: boolean;
    decimalSeparator: string;
    thousandSeparator: string;
    tabindex: number;
    formatInput: boolean;
    value: number;
    valueAsString: string;
    onModelChange: Function;
    onModelTouched: Function;
    keyPattern: RegExp;
    precision: number;
    timer: any;
    focus: boolean;
    filled: boolean;
    constructor(el: ElementRef, domHandler: DomHandler);
    ngOnInit(): void;
    repeat(interval: number, dir: number): void;
    spin(dir: number): void;
    toFixed(value: number, precision: number): string;
    onUpButtonMousedown(event: Event, input: HTMLInputElement): void;
    onUpButtonMouseup(event: Event): void;
    onUpButtonMouseleave(event: Event): void;
    onDownButtonMousedown(event: Event, input: HTMLInputElement): void;
    onDownButtonMouseup(event: Event): void;
    onDownButtonMouseleave(event: Event): void;
    onInputKeydown(event: KeyboardEvent): void;
    onInputKeyPress(event: KeyboardEvent): void;
    onInput(event: Event, inputValue: string): void;
    onBlur(): void;
    onFocus(): void;
    parseValue(val: string): number;
    formatValue(): void;
    handleChange(event: Event): void;
    clearTimer(): void;
    writeValue(value: any): void;
    registerOnChange(fn: Function): void;
    registerOnTouched(fn: Function): void;
    setDisabledState(val: boolean): void;
    updateFilledState(): void;
}
export class SpinnerModule {
}
}
declare module 'primeng/components/spinner/spinner' {
export * from '~primeng/components/spinner/spinner';
}

// Generated by typings
// Source: node_modules/primeng/components/splitbutton/splitbutton.d.ts
declare module '~primeng/components/splitbutton/splitbutton' {
import { ElementRef, OnInit, OnDestroy, EventEmitter, Renderer } from '@angular/core';
import { DomHandler } from '~primeng/components/dom/domhandler';
import { MenuItem } from '~primeng/components/common/api';
import { Router } from '@angular/router';
export class SplitButton implements OnInit, OnDestroy {
    el: ElementRef;
    domHandler: DomHandler;
    renderer: Renderer;
    router: Router;
    model: MenuItem[];
    icon: string;
    iconPos: string;
    label: string;
    onClick: EventEmitter<any>;
    style: any;
    styleClass: string;
    menuStyle: any;
    menuStyleClass: string;
    disabled: boolean;
    tabindex: number;
    menuVisible: boolean;
    documentClickListener: any;
    constructor(el: ElementRef, domHandler: DomHandler, renderer: Renderer, router: Router);
    ngOnInit(): void;
    onDefaultButtonClick(event: Event): void;
    itemClick(event: Event, item: MenuItem): void;
    onDropdownClick(event: Event, menu: HTMLDivElement, container: Element): void;
    ngOnDestroy(): void;
}
export class SplitButtonModule {
}
}
declare module 'primeng/components/splitbutton/splitbutton' {
export * from '~primeng/components/splitbutton/splitbutton';
}

// Generated by typings
// Source: node_modules/primeng/components/steps/steps.d.ts
declare module '~primeng/components/steps/steps' {
import { EventEmitter } from '@angular/core';
import { MenuItem } from '~primeng/components/common/api';
import { Router } from '@angular/router';
export class Steps {
    router: Router;
    activeIndex: number;
    model: MenuItem[];
    readonly: boolean;
    style: any;
    styleClass: string;
    activeIndexChange: EventEmitter<any>;
    constructor(router: Router);
    itemClick(event: Event, item: MenuItem, i: number): void;
}
export class StepsModule {
}
}
declare module 'primeng/components/steps/steps' {
export * from '~primeng/components/steps/steps';
}

// Generated by typings
// Source: node_modules/primeng/components/tabview/tabview.d.ts
declare module '~primeng/components/tabview/tabview' {
import { ElementRef, EventEmitter, AfterContentInit, QueryList } from '@angular/core';
import { BlockableUI } from '~primeng/components/common/api';
export class TabViewNav {
    tabs: TabPanel[];
    orientation: string;
    onTabClick: EventEmitter<any>;
    onTabCloseClick: EventEmitter<any>;
    getDefaultHeaderClass(tab: TabPanel): string;
    clickTab(event: any, tab: TabPanel): void;
    clickClose(event: any, tab: TabPanel): void;
}
export class TabPanel {
    header: string;
    selected: boolean;
    disabled: boolean;
    closable: boolean;
    headerStyle: any;
    headerStyleClass: string;
    leftIcon: string;
    rightIcon: string;
    closed: boolean;
    lazy: boolean;
}
export class TabView implements AfterContentInit, BlockableUI {
    el: ElementRef;
    orientation: string;
    style: any;
    styleClass: string;
    controlClose: boolean;
    lazy: boolean;
    tabPanels: QueryList<TabPanel>;
    onChange: EventEmitter<any>;
    onClose: EventEmitter<any>;
    initialized: boolean;
    tabs: TabPanel[];
    constructor(el: ElementRef);
    ngAfterContentInit(): void;
    initTabs(): void;
    open(event: Event, tab: TabPanel): void;
    close(event: Event, tab: TabPanel): void;
    closeTab(tab: TabPanel): void;
    findSelectedTab(): TabPanel;
    findTabIndex(tab: TabPanel): number;
    getBlockableElement(): HTMLElement;
}
export class TabViewModule {
}
}
declare module 'primeng/components/tabview/tabview' {
export * from '~primeng/components/tabview/tabview';
}

// Generated by typings
// Source: node_modules/primeng/components/tabmenu/tabmenu.d.ts
declare module '~primeng/components/tabmenu/tabmenu' {
import { OnDestroy } from '@angular/core';
import { MenuItem } from '~primeng/components/common/api';
import { Router } from '@angular/router';
export class TabMenu implements OnDestroy {
    router: Router;
    model: MenuItem[];
    activeItem: MenuItem;
    popup: boolean;
    style: any;
    styleClass: string;
    constructor(router: Router);
    ngOnInit(): void;
    itemClick(event: Event, item: MenuItem): void;
    ngOnDestroy(): void;
    unsubscribe(item: any): void;
}
export class TabMenuModule {
}
}
declare module 'primeng/components/tabmenu/tabmenu' {
export * from '~primeng/components/tabmenu/tabmenu';
}

// Generated by typings
// Source: node_modules/primeng/components/terminal/terminal.d.ts
declare module '~primeng/components/terminal/terminal' {
import { AfterViewInit, AfterViewChecked, EventEmitter, ElementRef } from '@angular/core';
import { DomHandler } from '~primeng/components/dom/domhandler';
export class Terminal implements AfterViewInit, AfterViewChecked {
    el: ElementRef;
    domHandler: DomHandler;
    welcomeMessage: string;
    prompt: string;
    style: any;
    styleClass: string;
    responseChange: EventEmitter<any>;
    handler: EventEmitter<any>;
    commands: any[];
    command: string;
    container: Element;
    commandProcessed: boolean;
    constructor(el: ElementRef, domHandler: DomHandler);
    ngAfterViewInit(): void;
    ngAfterViewChecked(): void;
    response: string;
    handleCommand(event: KeyboardEvent): void;
    focus(element: HTMLElement): void;
}
export class TerminalModule {
}
}
declare module 'primeng/components/terminal/terminal' {
export * from '~primeng/components/terminal/terminal';
}

// Generated by typings
// Source: node_modules/primeng/components/tieredmenu/tieredmenu.d.ts
declare module '~primeng/components/tieredmenu/tieredmenu' {
import { ElementRef, AfterViewInit, OnDestroy, Renderer } from '@angular/core';
import { DomHandler } from '~primeng/components/dom/domhandler';
import { MenuItem } from '~primeng/components/common/api';
import { Location } from '@angular/common';
import { Router } from '@angular/router';
export class TieredMenuSub {
    domHandler: DomHandler;
    router: Router;
    location: Location;
    item: MenuItem;
    root: boolean;
    constructor(domHandler: DomHandler, router: Router, location: Location);
    activeItem: Element;
    onItemMouseEnter(event: Event, item: HTMLElement, menuitem: MenuItem): void;
    onItemMouseLeave(event: Event): void;
    itemClick(event: Event, item: MenuItem): boolean;
    listClick(event: Event): void;
}
export class TieredMenu implements AfterViewInit, OnDestroy {
    el: ElementRef;
    domHandler: DomHandler;
    renderer: Renderer;
    model: MenuItem[];
    popup: boolean;
    style: any;
    styleClass: string;
    container: any;
    documentClickListener: any;
    preventDocumentDefault: any;
    constructor(el: ElementRef, domHandler: DomHandler, renderer: Renderer);
    ngAfterViewInit(): void;
    toggle(event: Event): void;
    show(event: Event): void;
    hide(): void;
    unsubscribe(item: any): void;
    ngOnDestroy(): void;
}
export class TieredMenuModule {
}
}
declare module 'primeng/components/tieredmenu/tieredmenu' {
export * from '~primeng/components/tieredmenu/tieredmenu';
}

// Generated by typings
// Source: node_modules/primeng/components/togglebutton/togglebutton.d.ts
declare module '~primeng/components/togglebutton/togglebutton' {
import { EventEmitter, AfterViewInit, ElementRef } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
export const TOGGLEBUTTON_VALUE_ACCESSOR: any;
export class ToggleButton implements ControlValueAccessor, AfterViewInit {
    onLabel: string;
    offLabel: string;
    onIcon: string;
    offIcon: string;
    disabled: boolean;
    style: any;
    styleClass: string;
    tabindex: number;
    onChange: EventEmitter<any>;
    checkboxViewChild: ElementRef;
    checkbox: HTMLInputElement;
    checked: boolean;
    focus: boolean;
    onModelChange: Function;
    onModelTouched: Function;
    ngAfterViewInit(): void;
    getIconClass(): string;
    toggle(event: Event): void;
    onFocus(): void;
    onBlur(): void;
    writeValue(value: any): void;
    registerOnChange(fn: Function): void;
    registerOnTouched(fn: Function): void;
    setDisabledState(val: boolean): void;
}
export class ToggleButtonModule {
}
}
declare module 'primeng/components/togglebutton/togglebutton' {
export * from '~primeng/components/togglebutton/togglebutton';
}

// Generated by typings
// Source: node_modules/primeng/components/toolbar/toolbar.d.ts
declare module '~primeng/components/toolbar/toolbar' {
export class Toolbar {
    style: any;
    styleClass: string;
}
export class ToolbarModule {
}
}
declare module 'primeng/components/toolbar/toolbar' {
export * from '~primeng/components/toolbar/toolbar';
}

// Generated by typings
// Source: node_modules/primeng/components/tooltip/tooltip.d.ts
declare module '~primeng/components/tooltip/tooltip' {
import { ElementRef, OnDestroy } from '@angular/core';
import { DomHandler } from '~primeng/components/dom/domhandler';
export class Tooltip implements OnDestroy {
    el: ElementRef;
    domHandler: DomHandler;
    text: string;
    tooltipPosition: string;
    tooltipEvent: string;
    appendTo: any;
    positionStyle: string;
    tooltipStyleClass: string;
    disabled: boolean;
    container: any;
    constructor(el: ElementRef, domHandler: DomHandler);
    onMouseEnter(e: Event): void;
    onMouseLeave(e: Event): void;
    onFocus(e: Event): void;
    onBlur(e: Event): void;
    show(): void;
    hide(): void;
    create(): void;
    ngOnDestroy(): void;
}
export class TooltipModule {
}
}
declare module 'primeng/components/tooltip/tooltip' {
export * from '~primeng/components/tooltip/tooltip';
}

// Generated by typings
// Source: node_modules/primeng/components/tree/tree.d.ts
declare module '~primeng/components/tree/tree' {
import { AfterContentInit, EventEmitter, OnInit, OnDestroy, EmbeddedViewRef, ViewContainerRef, QueryList, TemplateRef } from '@angular/core';
import { TreeNode } from '~primeng/components/common/api';
export class TreeNodeTemplateLoader implements OnInit, OnDestroy {
    viewContainer: ViewContainerRef;
    node: any;
    template: TemplateRef<any>;
    view: EmbeddedViewRef<any>;
    constructor(viewContainer: ViewContainerRef);
    ngOnInit(): void;
    ngOnDestroy(): void;
}
export class UITreeNode implements OnInit {
    tree: Tree;
    static ICON_CLASS: string;
    node: TreeNode;
    parentNode: TreeNode;
    root: boolean;
    firstChild: boolean;
    lastChild: boolean;
    constructor(tree: Tree);
    ngOnInit(): void;
    getIcon(): string;
    isLeaf(): boolean;
    toggle(event: Event): void;
    onNodeClick(event: MouseEvent): void;
    onNodeTouchEnd(): void;
    onNodeRightClick(event: MouseEvent): void;
    isSelected(): boolean;
}
export class Tree implements AfterContentInit {
    value: TreeNode[];
    selectionMode: string;
    selection: any;
    selectionChange: EventEmitter<any>;
    onNodeSelect: EventEmitter<any>;
    onNodeUnselect: EventEmitter<any>;
    onNodeExpand: EventEmitter<any>;
    onNodeCollapse: EventEmitter<any>;
    onNodeContextMenuSelect: EventEmitter<any>;
    style: any;
    styleClass: string;
    contextMenu: any;
    layout: string;
    metaKeySelection: boolean;
    templates: QueryList<any>;
    templateMap: any;
    nodeTouched: boolean;
    readonly horizontal: boolean;
    ngAfterContentInit(): void;
    onNodeClick(event: MouseEvent, node: TreeNode): void;
    onNodeTouchEnd(): void;
    onNodeRightClick(event: MouseEvent, node: TreeNode): void;
    findIndexInSelection(node: TreeNode): number;
    propagateSelectionUp(node: TreeNode, select: boolean): void;
    propagateSelectionDown(node: TreeNode, select: boolean): void;
    isSelected(node: TreeNode): boolean;
    isSingleSelectionMode(): boolean;
    isMultipleSelectionMode(): boolean;
    isCheckboxSelectionMode(): boolean;
    getTemplateForNode(node: TreeNode): TemplateRef<any>;
}
export class TreeModule {
}
}
declare module 'primeng/components/tree/tree' {
export * from '~primeng/components/tree/tree';
}

// Generated by typings
// Source: node_modules/primeng/components/treetable/treetable.d.ts
declare module '~primeng/components/treetable/treetable' {
import { EventEmitter, QueryList, OnInit } from '@angular/core';
import { TreeNode } from '~primeng/components/common/api';
import { Header, Footer, Column } from '~primeng/components/common/shared';
export class UITreeRow implements OnInit {
    treeTable: TreeTable;
    node: TreeNode;
    parentNode: TreeNode;
    level: number;
    labelExpand: string;
    labelCollapse: string;
    constructor(treeTable: TreeTable);
    ngOnInit(): void;
    toggle(event: Event): void;
    isLeaf(): boolean;
    isSelected(): boolean;
    onRowClick(event: MouseEvent): void;
    onRowTouchEnd(): void;
    resolveFieldData(data: any, field: string): any;
}
export class TreeTable {
    value: TreeNode[];
    selectionMode: string;
    selection: any;
    selectionChange: EventEmitter<any>;
    onNodeSelect: EventEmitter<any>;
    onNodeUnselect: EventEmitter<any>;
    onNodeExpand: EventEmitter<any>;
    onNodeCollapse: EventEmitter<any>;
    style: any;
    styleClass: string;
    labelExpand: string;
    labelCollapse: string;
    metaKeySelection: boolean;
    header: Header;
    footer: Footer;
    columns: QueryList<Column>;
    rowTouched: boolean;
    onRowClick(event: MouseEvent, node: TreeNode): void;
    onRowTouchEnd(): void;
    findIndexInSelection(node: TreeNode): number;
    propagateSelectionUp(node: TreeNode, select: boolean): void;
    propagateSelectionDown(node: TreeNode, select: boolean): void;
    isSelected(node: TreeNode): boolean;
    isSingleSelectionMode(): boolean;
    isMultipleSelectionMode(): boolean;
    isCheckboxSelectionMode(): boolean;
    hasFooter(): boolean;
}
export class TreeTableModule {
}
}
declare module 'primeng/components/treetable/treetable' {
export * from '~primeng/components/treetable/treetable';
}

// Generated by typings
// Source: node_modules/primeng/components/tristatecheckbox/tristatecheckbox.d.ts
declare module '~primeng/components/tristatecheckbox/tristatecheckbox' {
import { EventEmitter, ChangeDetectorRef } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
export const TRISTATECHECKBOX_VALUE_ACCESSOR: any;
export class TriStateCheckbox implements ControlValueAccessor {
    private cd;
    constructor(cd: ChangeDetectorRef);
    disabled: boolean;
    name: string;
    tabindex: number;
    onChange: EventEmitter<any>;
    focus: boolean;
    value: any;
    onModelChange: Function;
    onModelTouched: Function;
    onClick(event: Event, input: HTMLInputElement): void;
    onKeydown(event: KeyboardEvent): void;
    onKeyup(event: KeyboardEvent): void;
    toggle(event: Event): void;
    onFocus(): void;
    onBlur(): void;
    registerOnChange(fn: Function): void;
    registerOnTouched(fn: Function): void;
    writeValue(value: any): void;
    setDisabledState(disabled: boolean): void;
}
export class TriStateCheckboxModule {
}
}
declare module 'primeng/components/tristatecheckbox/tristatecheckbox' {
export * from '~primeng/components/tristatecheckbox/tristatecheckbox';
}

// Generated by typings
// Source: node_modules/primeng/primeng.d.ts
declare module '~primeng/primeng' {
export * from '~primeng/components/common/api';
export * from '~primeng/components/common/shared';
export * from '~primeng/components/accordion/accordion';
export * from '~primeng/components/autocomplete/autocomplete';
export * from '~primeng/components/blockui/blockui';
export * from '~primeng/components/breadcrumb/breadcrumb';
export * from '~primeng/components/button/button';
export * from '~primeng/components/captcha/captcha';
export * from '~primeng/components/calendar/calendar';
export * from '~primeng/components/carousel/carousel';
export * from '~primeng/components/chart/chart';
export * from '~primeng/components/checkbox/checkbox';
export * from '~primeng/components/chips/chips';
export * from '~primeng/components/codehighlighter/codehighlighter';
export * from '~primeng/components/contextmenu/contextmenu';
export * from '~primeng/components/datagrid/datagrid';
export * from '~primeng/components/datalist/datalist';
export * from '~primeng/components/datascroller/datascroller';
export * from '~primeng/components/datatable/datatable';
export * from '~primeng/components/confirmdialog/confirmdialog';
export * from '~primeng/components/dialog/dialog';
export * from '~primeng/components/dragdrop/dragdrop';
export * from '~primeng/components/dropdown/dropdown';
export * from '~primeng/components/editor/editor';
export * from '~primeng/components/fieldset/fieldset';
export * from '~primeng/components/fileupload/fileupload';
export * from '~primeng/components/galleria/galleria';
export * from '~primeng/components/gmap/gmap';
export * from '~primeng/components/growl/growl';
export * from '~primeng/components/inplace/inplace';
export * from '~primeng/components/inputmask/inputmask';
export * from '~primeng/components/inputswitch/inputswitch';
export * from '~primeng/components/inputtext/inputtext';
export * from '~primeng/components/inputtextarea/inputtextarea';
export * from '~primeng/components/lightbox/lightbox';
export * from '~primeng/components/listbox/listbox';
export * from '~primeng/components/megamenu/megamenu';
export * from '~primeng/components/menu/menu';
export * from '~primeng/components/menubar/menubar';
export * from '~primeng/components/messages/messages';
export * from '~primeng/components/multiselect/multiselect';
export * from '~primeng/components/orderlist/orderlist';
export * from '~primeng/components/overlaypanel/overlaypanel';
export * from '~primeng/components/paginator/paginator';
export * from '~primeng/components/panel/panel';
export * from '~primeng/components/panelmenu/panelmenu';
export * from '~primeng/components/password/password';
export * from '~primeng/components/picklist/picklist';
export * from '~primeng/components/progressbar/progressbar';
export * from '~primeng/components/radiobutton/radiobutton';
export * from '~primeng/components/rating/rating';
export * from '~primeng/components/schedule/schedule';
export * from '~primeng/components/selectbutton/selectbutton';
export * from '~primeng/components/slidemenu/slidemenu';
export * from '~primeng/components/slider/slider';
export * from '~primeng/components/spinner/spinner';
export * from '~primeng/components/splitbutton/splitbutton';
export * from '~primeng/components/steps/steps';
export * from '~primeng/components/tabview/tabview';
export * from '~primeng/components/tabmenu/tabmenu';
export * from '~primeng/components/terminal/terminal';
export * from '~primeng/components/tieredmenu/tieredmenu';
export * from '~primeng/components/togglebutton/togglebutton';
export * from '~primeng/components/toolbar/toolbar';
export * from '~primeng/components/tooltip/tooltip';
export * from '~primeng/components/tree/tree';
export * from '~primeng/components/treetable/treetable';
export * from '~primeng/components/tristatecheckbox/tristatecheckbox';
}
declare module 'primeng/primeng' {
export * from '~primeng/primeng';
}
declare module 'primeng' {
export * from '~primeng/primeng';
}
